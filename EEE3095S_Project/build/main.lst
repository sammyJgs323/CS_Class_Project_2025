ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB140:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** 	/* EEE3095S
  19:Core/Src/main.c **** 	 * CS Class Project 2025
  20:Core/Src/main.c **** 	 * PFFTAH001, SMLJOS008
  21:Core/Src/main.c **** 	 *
  22:Core/Src/main.c **** 	 * */
  23:Core/Src/main.c **** /* USER CODE END Header */
  24:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  25:Core/Src/main.c **** #include "main.h"
  26:Core/Src/main.c **** #include <string.h>
  27:Core/Src/main.c **** #include <stdbool.h>
  28:Core/Src/main.c **** #include <stdio.h>
  29:Core/Src/main.c **** //for the STM32F4
  30:Core/Src/main.c **** #include "stm32f4xx.h"
  31:Core/Src/main.c **** #include "stm32f4xx_hal.h"
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END Includes */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PTD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PD */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  49:Core/Src/main.c **** /* USER CODE BEGIN PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  54:Core/Src/main.c **** //UART handle for USART1
  55:Core/Src/main.c **** UART_HandleTypeDef huart1;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** //max length for each access code
  58:Core/Src/main.c **** #define MAX_LEN 100
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE BEGIN PV */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  65:Core/Src/main.c **** void SystemClock_Config(void);
  66:Core/Src/main.c **** static void MX_GPIO_Init(void);
  67:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  68:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END PFP */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  73:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END 0 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /**
  78:Core/Src/main.c ****   * @brief  The application entry point.
  79:Core/Src/main.c ****   * @retval int
  80:Core/Src/main.c ****   */
  81:Core/Src/main.c **** int main(void)
  82:Core/Src/main.c **** {
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  91:Core/Src/main.c ****   HAL_Init();
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END Init */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Configure the system clock */
  98:Core/Src/main.c ****   SystemClock_Config();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END SysInit */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Initialize all configured peripherals */
 105:Core/Src/main.c ****   MX_GPIO_Init();
 106:Core/Src/main.c ****   MX_USART1_UART_Init();
 107:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   //buffer for three access codes (each up to 100 chars + null terminator)
 111:Core/Src/main.c ****   char accessCodes[3][MAX_LEN + 1];
 112:Core/Src/main.c ****   memset(accessCodes, 0, sizeof(accessCodes));  // initialize all codes as empty
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   //connection state, true after connect false after disconnect
 115:Core/Src/main.c ****   bool connected = false;
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   //buffer for incoming UART data/ commands
 118:Core/Src/main.c ****   char dataBuff[128];
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* USER CODE END 2 */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* Infinite loop */
 123:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 124:Core/Src/main.c ****   while (1)
 125:Core/Src/main.c ****   {
 126:Core/Src/main.c ****     /* USER CODE END WHILE */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 129:Core/Src/main.c **** 	    //receive a line (command) from UART
 130:Core/Src/main.c **** 	    char c;
 131:Core/Src/main.c **** 	    uint16_t i = 0;
 132:Core/Src/main.c **** 	    // Read characters one by one until newline ('\n') is received
 133:Core/Src/main.c **** 	    do {
 134:Core/Src/main.c **** 	      if (HAL_UART_Receive(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY) != HAL_OK) {
 135:Core/Src/main.c **** 	        Error_Handler();  // In case of UART error, halt (could also continue to next loop)
 136:Core/Src/main.c **** 	      }
 137:Core/Src/main.c **** 	      if (c == '\r') {
 138:Core/Src/main.c **** 	    	  // skip carriage return if present
 139:Core/Src/main.c **** 	        continue;
 140:Core/Src/main.c **** 	      }
 141:Core/Src/main.c **** 	      if (c == '\n') {
 142:Core/Src/main.c **** 	    	  // newline indicates end of command
 143:Core/Src/main.c **** 	        break;
 144:Core/Src/main.c **** 	      }
 145:Core/Src/main.c **** 	      if (i < sizeof(dataBuff) - 1) {
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 4


 146:Core/Src/main.c **** 	    	  // append character to buffer if space allows
 147:Core/Src/main.c **** 	        dataBuff[i++] = c;
 148:Core/Src/main.c **** 	      } else {
 149:Core/Src/main.c **** 	        // buffer overflow if line too long then truncate and break
 150:Core/Src/main.c **** 	        dataBuff[i] = '\0';
 151:Core/Src/main.c **** 	        break;
 152:Core/Src/main.c **** 	      }
 153:Core/Src/main.c **** 	    } while (1);
 154:Core/Src/main.c **** 	    // null-terminate the received string
 155:Core/Src/main.c **** 	    dataBuff[i] = '\0';
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** 	    //parse and handle the command in dataBuff
 158:Core/Src/main.c **** 	    if (strcmp(dataBuff, "CONNECT") == 0) {
 159:Core/Src/main.c **** 	      // CONNECT command: establish connection
 160:Core/Src/main.c **** 	      connected = true;
 161:Core/Src/main.c **** 	      const char *resp = "OK\n";
 162:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 163:Core/Src/main.c **** 	    }
 164:Core/Src/main.c **** 	    else if (!connected) {
 165:Core/Src/main.c **** 	      // if not connected yet, only CONNECT is valid and respond with error for any other command
 166:Core/Src/main.c **** 	      const char *resp = "ERROR\n";
 167:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 168:Core/Src/main.c **** 	    }
 169:Core/Src/main.c **** 	    else if (strcmp(dataBuff, "DISCONNECT") == 0) {
 170:Core/Src/main.c **** 	      // DISCONNECT command: end session
 171:Core/Src/main.c **** 	      connected = false;
 172:Core/Src/main.c **** 	      const char *resp = "OK\n";
 173:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 174:Core/Src/main.c **** 	      // after disconnect the device stays running and can accept a new CONNECT
 175:Core/Src/main.c **** 	    }
 176:Core/Src/main.c **** 	    else if (strncmp(dataBuff, "GET_CODE_", 9) == 0) {
 177:Core/Src/main.c **** 	      // GET_CODE_n command: retrieve a code if it exists
 178:Core/Src/main.c **** 	      // expect exactly one digit (1-3) after "GET_CODE_"
 179:Core/Src/main.c **** 	    	// the character representing code index
 180:Core/Src/main.c **** 	      char codeIndexChar = dataBuff[9];
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** 	      if ((codeIndexChar >= '1' && codeIndexChar <= '3') && dataBuff[10] == '\0') {
 183:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 184:Core/Src/main.c **** 	        int idx = codeIndexChar - '1';
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** 	        if (accessCodes[idx][0] != '\0') {
 187:Core/Src/main.c **** 	          // if code exists send it back prefixed with "CODE:"
 188:Core/Src/main.c **** 	          char codeBuff[128];
 189:Core/Src/main.c **** 	          snprintf(codeBuff, sizeof(codeBuff), "CODE:%s\n", accessCodes[idx]);
 190:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)codeBuff, strlen(codeBuff), HAL_MAX_DELAY);
 191:Core/Src/main.c **** 	        } else {
 192:Core/Src/main.c **** 	          // if code not set respond with NOT_FOUND
 193:Core/Src/main.c **** 	          const char *resp = "NOT_FOUND\n";
 194:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 195:Core/Src/main.c **** 	        }
 196:Core/Src/main.c **** 	      } else {
 197:Core/Src/main.c **** 	        // error in GET_CODE command such as invalid index or extra characters
 198:Core/Src/main.c **** 	        const char *resp = "ERROR\n";
 199:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 200:Core/Src/main.c **** 	      }
 201:Core/Src/main.c **** 	    }
 202:Core/Src/main.c **** 	    else if (strncmp(dataBuff, "SET_CODE_", 9) == 0) {
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 5


 203:Core/Src/main.c **** 	      // SET_CODE_n:value command: store a new code value
 204:Core/Src/main.c **** 	    	// the character representing code index
 205:Core/Src/main.c **** 	      char codeIndexChar = dataBuff[9];
 206:Core/Src/main.c **** 
 207:Core/Src/main.c **** 	      if ((codeIndexChar >= '1' && codeIndexChar <= '3') && dataBuff[10] == ':') {
 208:Core/Src/main.c **** 	    	  // target index 0-2
 209:Core/Src/main.c **** 	        int idx = codeIndexChar - '1';
 210:Core/Src/main.c **** 	        // pointer to the code value after the SET_CODE_n prefix
 211:Core/Src/main.c **** 	        char *codeValue = &dataBuff[11];
 212:Core/Src/main.c **** 	        // save the new code up to MAX_Len characters
 213:Core/Src/main.c **** 	        if (strlen(codeValue) <= MAX_LEN) {
 214:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 215:Core/Src/main.c **** 	        } else {
 216:Core/Src/main.c **** 	          strncpy(accessCodes[idx], codeValue, MAX_LEN);
 217:Core/Src/main.c **** 	          // ensure termination if truncated
 218:Core/Src/main.c **** 	          accessCodes[idx][MAX_LEN] = '\0';
 219:Core/Src/main.c **** 	        }
 220:Core/Src/main.c **** 	        // respond to confirm the code is saved
 221:Core/Src/main.c **** 	        const char *resp = "SAVED\n";
 222:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 223:Core/Src/main.c **** 	      } else {
 224:Core/Src/main.c **** 	        // error in SET_CODE command such as missing index or colon
 225:Core/Src/main.c **** 	        const char *resp = "ERROR\n";
 226:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 227:Core/Src/main.c **** 	      }
 228:Core/Src/main.c **** 	    }
 229:Core/Src/main.c **** 	    else {
 230:Core/Src/main.c **** 	      // unknown command received respond with generic error
 231:Core/Src/main.c **** 	      const char *resp = "ERROR\n";
 232:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 233:Core/Src/main.c **** 	    }
 234:Core/Src/main.c **** 
 235:Core/Src/main.c **** 	    // loop back to wait for the next command line
 236:Core/Src/main.c **** 	  }
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE END 3 */
 239:Core/Src/main.c **** }
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** /**
 242:Core/Src/main.c ****   * @brief System Clock Configuration
 243:Core/Src/main.c ****   * @retval None
 244:Core/Src/main.c ****   */
 245:Core/Src/main.c **** void SystemClock_Config(void)
 246:Core/Src/main.c **** {
 247:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 248:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 251:Core/Src/main.c ****   */
 252:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 253:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 256:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 257:Core/Src/main.c ****   */
 258:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 259:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 6


 260:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 261:Core/Src/main.c ****   //RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 262:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 266:Core/Src/main.c ****   // 16 MHz * 336 / 4 = 84 MHz
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 269:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 270:Core/Src/main.c ****   {
 271:Core/Src/main.c ****     Error_Handler();
 272:Core/Src/main.c ****   }
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 275:Core/Src/main.c ****   */
 276:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 277:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 278:Core/Src/main.c ****   //system clock= PLL 84MHz
 279:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 280:Core/Src/main.c ****   //HCLK=84 MHz
 281:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 282:Core/Src/main.c ****   //APB1=42 MHz
 283:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 284:Core/Src/main.c ****   //APB2=84 MHz
 285:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 288:Core/Src/main.c ****   {
 289:Core/Src/main.c ****     Error_Handler();
 290:Core/Src/main.c ****   }
 291:Core/Src/main.c **** }
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** /**
 294:Core/Src/main.c ****   * @brief USART1 Initialization Function
 295:Core/Src/main.c ****   * @param None
 296:Core/Src/main.c ****   * @retval None
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 299:Core/Src/main.c **** {
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 302:Core/Src/main.c **** 	/* Enable UART and GPIO clocks */
 303:Core/Src/main.c **** 	 __HAL_RCC_USART1_CLK_ENABLE();
 304:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 305:Core/Src/main.c **** 
 306:Core/Src/main.c **** 	  /* Configure PA9  and PA10 as alternate function UART pins */
 307:Core/Src/main.c **** 	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 308:Core/Src/main.c **** 	  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 309:Core/Src/main.c **** 	  // push-pull alternate function
 310:Core/Src/main.c **** 	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 311:Core/Src/main.c **** 	  // no pull-up or pull-down resistors
 312:Core/Src/main.c **** 	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 313:Core/Src/main.c **** 	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 314:Core/Src/main.c **** 	  // AF7 for USART1 pins
 315:Core/Src/main.c **** 	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 316:Core/Src/main.c **** 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 7


 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 323:Core/Src/main.c ****   huart1.Instance = USART1;
 324:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 325:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 326:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 327:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 328:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 329:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 330:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 331:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 332:Core/Src/main.c ****   {
 333:Core/Src/main.c ****     Error_Handler();
 334:Core/Src/main.c ****   }
 335:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 338:Core/Src/main.c **** 
 339:Core/Src/main.c **** }
 340:Core/Src/main.c **** 
 341:Core/Src/main.c **** /**
 342:Core/Src/main.c ****   * @brief GPIO Initialization Function
 343:Core/Src/main.c ****   * @param None
 344:Core/Src/main.c ****   * @retval None
 345:Core/Src/main.c ****   */
 346:Core/Src/main.c **** static void MX_GPIO_Init(void)
 347:Core/Src/main.c **** {
  28              		.loc 1 347 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 348:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 348 3 view .LVU1
  42              		.loc 1 348 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0394     		str	r4, [sp, #12]
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
 349:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 352:Core/Src/main.c **** 
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 8


 353:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 354:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  49              		.loc 1 354 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 354 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 354 3 view .LVU5
  54 0012 134B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00202 		orr	r2, r2, #2
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 354 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00202 		and	r2, r2, #2
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 354 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 354 3 view .LVU8
 355:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  66              		.loc 1 355 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 355 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 355 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F00102 		orr	r2, r2, #1
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 355 3 view .LVU12
  75 0030 1B6B     		ldr	r3, [r3, #48]
  76 0032 03F00103 		and	r3, r3, #1
  77 0036 0293     		str	r3, [sp, #8]
  78              		.loc 1 355 3 view .LVU13
  79 0038 029B     		ldr	r3, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 355 3 view .LVU14
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 358:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
  82              		.loc 1 358 3 view .LVU15
  83 003a 0A4D     		ldr	r5, .L3+4
  84 003c 2246     		mov	r2, r4
  85 003e FF21     		movs	r1, #255
  86 0040 2846     		mov	r0, r5
  87 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  88              	.LVL0:
 359:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 362:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 363:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
  89              		.loc 1 363 3 view .LVU16
  90              		.loc 1 363 23 is_stmt 0 view .LVU17
  91 0046 FF23     		movs	r3, #255
  92 0048 0393     		str	r3, [sp, #12]
 364:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 365:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 9


  93              		.loc 1 365 3 is_stmt 1 view .LVU18
  94              		.loc 1 365 24 is_stmt 0 view .LVU19
  95 004a 0123     		movs	r3, #1
  96 004c 0493     		str	r3, [sp, #16]
 366:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  97              		.loc 1 366 3 is_stmt 1 view .LVU20
  98              		.loc 1 366 24 is_stmt 0 view .LVU21
  99 004e 0594     		str	r4, [sp, #20]
 367:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 100              		.loc 1 367 3 is_stmt 1 view .LVU22
 101              		.loc 1 367 25 is_stmt 0 view .LVU23
 102 0050 0694     		str	r4, [sp, #24]
 368:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 103              		.loc 1 368 3 is_stmt 1 view .LVU24
 104 0052 03A9     		add	r1, sp, #12
 105 0054 2846     		mov	r0, r5
 106 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 107              	.LVL1:
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 373:Core/Src/main.c **** }
 108              		.loc 1 373 1 is_stmt 0 view .LVU25
 109 005a 09B0     		add	sp, sp, #36
 110              	.LCFI2:
 111              		.cfi_def_cfa_offset 12
 112              		@ sp needed
 113 005c 30BD     		pop	{r4, r5, pc}
 114              	.L4:
 115 005e 00BF     		.align	2
 116              	.L3:
 117 0060 00380240 		.word	1073887232
 118 0064 00040240 		.word	1073873920
 119              		.cfi_endproc
 120              	.LFE140:
 122              		.section	.text.Error_Handler,"ax",%progbits
 123              		.align	1
 124              		.global	Error_Handler
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	Error_Handler:
 130              	.LFB141:
 374:Core/Src/main.c **** 
 375:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** /* USER CODE END 4 */
 378:Core/Src/main.c **** 
 379:Core/Src/main.c **** /**
 380:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 381:Core/Src/main.c ****   * @retval None
 382:Core/Src/main.c ****   */
 383:Core/Src/main.c **** void Error_Handler(void)
 384:Core/Src/main.c **** {
 131              		.loc 1 384 1 is_stmt 1 view -0
 132              		.cfi_startproc
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 10


 133              		@ Volatile: function does not return.
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 385:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 386:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 387:Core/Src/main.c ****   __disable_irq();
 137              		.loc 1 387 3 view .LVU27
 138              	.LBB6:
 139              	.LBI6:
 140              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 11


  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 12


 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 13


 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 14


 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 15


 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 16


 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 17


 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 18


 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 19


 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 20


 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 21


 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 22


 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 23


 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 24


 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 25


 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 26


 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 27


 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141              		.loc 2 960 27 view .LVU28
 142              	.LBB7:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143              		.loc 2 962 3 view .LVU29
 144              		.syntax unified
 145              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 146 0000 72B6     		cpsid i
 147              	@ 0 "" 2
 148              		.thumb
 149              		.syntax unified
 150              	.L6:
 151              	.LBE7:
 152              	.LBE6:
 388:Core/Src/main.c ****   while (1)
 153              		.loc 1 388 3 view .LVU30
 389:Core/Src/main.c ****   {
 390:Core/Src/main.c ****   }
 154              		.loc 1 390 3 view .LVU31
 388:Core/Src/main.c ****   while (1)
 155              		.loc 1 388 9 view .LVU32
 156 0002 FEE7     		b	.L6
 157              		.cfi_endproc
 158              	.LFE141:
 160              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 161              		.align	1
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 166              	MX_USART1_UART_Init:
 167              	.LFB139:
 299:Core/Src/main.c **** 
 168              		.loc 1 299 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 32
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172 0000 10B5     		push	{r4, lr}
 173              	.LCFI3:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 14, -4
 177 0002 88B0     		sub	sp, sp, #32
 178              	.LCFI4:
 179              		.cfi_def_cfa_offset 40
 303:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 180              		.loc 1 303 3 view .LVU34
 181              	.LBB8:
 303:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 182              		.loc 1 303 3 view .LVU35
 183 0004 0024     		movs	r4, #0
 184 0006 0194     		str	r4, [sp, #4]
 303:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 185              		.loc 1 303 3 view .LVU36
 186 0008 1C4B     		ldr	r3, .L11
 187 000a 5A6C     		ldr	r2, [r3, #68]
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 28


 188 000c 42F01002 		orr	r2, r2, #16
 189 0010 5A64     		str	r2, [r3, #68]
 303:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 190              		.loc 1 303 3 view .LVU37
 191 0012 5A6C     		ldr	r2, [r3, #68]
 192 0014 02F01002 		and	r2, r2, #16
 193 0018 0192     		str	r2, [sp, #4]
 303:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 194              		.loc 1 303 3 view .LVU38
 195 001a 019A     		ldr	r2, [sp, #4]
 196              	.LBE8:
 303:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 197              		.loc 1 303 3 view .LVU39
 304:Core/Src/main.c **** 
 198              		.loc 1 304 3 view .LVU40
 199              	.LBB9:
 304:Core/Src/main.c **** 
 200              		.loc 1 304 3 view .LVU41
 201 001c 0294     		str	r4, [sp, #8]
 304:Core/Src/main.c **** 
 202              		.loc 1 304 3 view .LVU42
 203 001e 1A6B     		ldr	r2, [r3, #48]
 204 0020 42F00102 		orr	r2, r2, #1
 205 0024 1A63     		str	r2, [r3, #48]
 304:Core/Src/main.c **** 
 206              		.loc 1 304 3 view .LVU43
 207 0026 1B6B     		ldr	r3, [r3, #48]
 208 0028 03F00103 		and	r3, r3, #1
 209 002c 0293     		str	r3, [sp, #8]
 304:Core/Src/main.c **** 
 210              		.loc 1 304 3 view .LVU44
 211 002e 029B     		ldr	r3, [sp, #8]
 212              	.LBE9:
 304:Core/Src/main.c **** 
 213              		.loc 1 304 3 view .LVU45
 307:Core/Src/main.c **** 	  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 214              		.loc 1 307 4 view .LVU46
 307:Core/Src/main.c **** 	  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 215              		.loc 1 307 21 is_stmt 0 view .LVU47
 216 0030 0394     		str	r4, [sp, #12]
 217 0032 0494     		str	r4, [sp, #16]
 218 0034 0594     		str	r4, [sp, #20]
 219 0036 0694     		str	r4, [sp, #24]
 220 0038 0794     		str	r4, [sp, #28]
 308:Core/Src/main.c **** 	  // push-pull alternate function
 221              		.loc 1 308 4 is_stmt 1 view .LVU48
 308:Core/Src/main.c **** 	  // push-pull alternate function
 222              		.loc 1 308 24 is_stmt 0 view .LVU49
 223 003a 4FF4C063 		mov	r3, #1536
 224 003e 0393     		str	r3, [sp, #12]
 310:Core/Src/main.c **** 	  // no pull-up or pull-down resistors
 225              		.loc 1 310 4 is_stmt 1 view .LVU50
 310:Core/Src/main.c **** 	  // no pull-up or pull-down resistors
 226              		.loc 1 310 25 is_stmt 0 view .LVU51
 227 0040 0223     		movs	r3, #2
 228 0042 0493     		str	r3, [sp, #16]
 312:Core/Src/main.c **** 	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 29


 229              		.loc 1 312 4 is_stmt 1 view .LVU52
 313:Core/Src/main.c **** 	  // AF7 for USART1 pins
 230              		.loc 1 313 4 view .LVU53
 313:Core/Src/main.c **** 	  // AF7 for USART1 pins
 231              		.loc 1 313 26 is_stmt 0 view .LVU54
 232 0044 0323     		movs	r3, #3
 233 0046 0693     		str	r3, [sp, #24]
 315:Core/Src/main.c **** 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 234              		.loc 1 315 4 is_stmt 1 view .LVU55
 315:Core/Src/main.c **** 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 235              		.loc 1 315 30 is_stmt 0 view .LVU56
 236 0048 0723     		movs	r3, #7
 237 004a 0793     		str	r3, [sp, #28]
 316:Core/Src/main.c **** 
 238              		.loc 1 316 4 is_stmt 1 view .LVU57
 239 004c 03A9     		add	r1, sp, #12
 240 004e 0C48     		ldr	r0, .L11+4
 241 0050 FFF7FEFF 		bl	HAL_GPIO_Init
 242              	.LVL2:
 323:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 243              		.loc 1 323 3 view .LVU58
 323:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 244              		.loc 1 323 19 is_stmt 0 view .LVU59
 245 0054 0B48     		ldr	r0, .L11+8
 246 0056 0C4B     		ldr	r3, .L11+12
 247 0058 0360     		str	r3, [r0]
 324:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 248              		.loc 1 324 3 is_stmt 1 view .LVU60
 324:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 249              		.loc 1 324 24 is_stmt 0 view .LVU61
 250 005a 4FF4E133 		mov	r3, #115200
 251 005e 4360     		str	r3, [r0, #4]
 325:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 252              		.loc 1 325 3 is_stmt 1 view .LVU62
 325:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 253              		.loc 1 325 26 is_stmt 0 view .LVU63
 254 0060 8460     		str	r4, [r0, #8]
 326:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 255              		.loc 1 326 3 is_stmt 1 view .LVU64
 326:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 256              		.loc 1 326 24 is_stmt 0 view .LVU65
 257 0062 C460     		str	r4, [r0, #12]
 327:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 258              		.loc 1 327 3 is_stmt 1 view .LVU66
 327:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 259              		.loc 1 327 22 is_stmt 0 view .LVU67
 260 0064 0461     		str	r4, [r0, #16]
 328:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 261              		.loc 1 328 3 is_stmt 1 view .LVU68
 328:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 262              		.loc 1 328 20 is_stmt 0 view .LVU69
 263 0066 0C23     		movs	r3, #12
 264 0068 4361     		str	r3, [r0, #20]
 329:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 265              		.loc 1 329 3 is_stmt 1 view .LVU70
 329:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 266              		.loc 1 329 25 is_stmt 0 view .LVU71
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 30


 267 006a 8461     		str	r4, [r0, #24]
 330:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 268              		.loc 1 330 3 is_stmt 1 view .LVU72
 330:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 269              		.loc 1 330 28 is_stmt 0 view .LVU73
 270 006c C461     		str	r4, [r0, #28]
 331:Core/Src/main.c ****   {
 271              		.loc 1 331 3 is_stmt 1 view .LVU74
 331:Core/Src/main.c ****   {
 272              		.loc 1 331 7 is_stmt 0 view .LVU75
 273 006e FFF7FEFF 		bl	HAL_UART_Init
 274              	.LVL3:
 331:Core/Src/main.c ****   {
 275              		.loc 1 331 6 discriminator 1 view .LVU76
 276 0072 08B9     		cbnz	r0, .L10
 339:Core/Src/main.c **** 
 277              		.loc 1 339 1 view .LVU77
 278 0074 08B0     		add	sp, sp, #32
 279              	.LCFI5:
 280              		.cfi_remember_state
 281              		.cfi_def_cfa_offset 8
 282              		@ sp needed
 283 0076 10BD     		pop	{r4, pc}
 284              	.L10:
 285              	.LCFI6:
 286              		.cfi_restore_state
 333:Core/Src/main.c ****   }
 287              		.loc 1 333 5 is_stmt 1 view .LVU78
 288 0078 FFF7FEFF 		bl	Error_Handler
 289              	.LVL4:
 290              	.L12:
 291              		.align	2
 292              	.L11:
 293 007c 00380240 		.word	1073887232
 294 0080 00000240 		.word	1073872896
 295 0084 00000000 		.word	huart1
 296 0088 00100140 		.word	1073811456
 297              		.cfi_endproc
 298              	.LFE139:
 300              		.section	.text.SystemClock_Config,"ax",%progbits
 301              		.align	1
 302              		.global	SystemClock_Config
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 307              	SystemClock_Config:
 308              	.LFB138:
 246:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 309              		.loc 1 246 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 80
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 00B5     		push	{lr}
 314              	.LCFI7:
 315              		.cfi_def_cfa_offset 4
 316              		.cfi_offset 14, -4
 317 0002 95B0     		sub	sp, sp, #84
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 31


 318              	.LCFI8:
 319              		.cfi_def_cfa_offset 88
 247:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 320              		.loc 1 247 3 view .LVU80
 247:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 321              		.loc 1 247 22 is_stmt 0 view .LVU81
 322 0004 3422     		movs	r2, #52
 323 0006 0021     		movs	r1, #0
 324 0008 07A8     		add	r0, sp, #28
 325 000a FFF7FEFF 		bl	memset
 326              	.LVL5:
 248:Core/Src/main.c **** 
 327              		.loc 1 248 3 is_stmt 1 view .LVU82
 248:Core/Src/main.c **** 
 328              		.loc 1 248 22 is_stmt 0 view .LVU83
 329 000e 0023     		movs	r3, #0
 330 0010 0293     		str	r3, [sp, #8]
 331 0012 0393     		str	r3, [sp, #12]
 332 0014 0493     		str	r3, [sp, #16]
 333 0016 0593     		str	r3, [sp, #20]
 334 0018 0693     		str	r3, [sp, #24]
 252:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 335              		.loc 1 252 3 is_stmt 1 view .LVU84
 336              	.LBB10:
 252:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 337              		.loc 1 252 3 view .LVU85
 338 001a 0093     		str	r3, [sp]
 252:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 339              		.loc 1 252 3 view .LVU86
 340 001c 1F4A     		ldr	r2, .L19
 341 001e 116C     		ldr	r1, [r2, #64]
 342 0020 41F08051 		orr	r1, r1, #268435456
 343 0024 1164     		str	r1, [r2, #64]
 252:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 344              		.loc 1 252 3 view .LVU87
 345 0026 126C     		ldr	r2, [r2, #64]
 346 0028 02F08052 		and	r2, r2, #268435456
 347 002c 0092     		str	r2, [sp]
 252:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 348              		.loc 1 252 3 view .LVU88
 349 002e 009A     		ldr	r2, [sp]
 350              	.LBE10:
 252:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 351              		.loc 1 252 3 view .LVU89
 253:Core/Src/main.c **** 
 352              		.loc 1 253 3 view .LVU90
 353              	.LBB11:
 253:Core/Src/main.c **** 
 354              		.loc 1 253 3 view .LVU91
 355 0030 0193     		str	r3, [sp, #4]
 253:Core/Src/main.c **** 
 356              		.loc 1 253 3 view .LVU92
 357 0032 1B49     		ldr	r1, .L19+4
 358 0034 0A68     		ldr	r2, [r1]
 359 0036 22F44042 		bic	r2, r2, #49152
 360 003a 42F48042 		orr	r2, r2, #16384
 361 003e 0A60     		str	r2, [r1]
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 32


 253:Core/Src/main.c **** 
 362              		.loc 1 253 3 view .LVU93
 363 0040 0A68     		ldr	r2, [r1]
 364 0042 02F44042 		and	r2, r2, #49152
 365 0046 0192     		str	r2, [sp, #4]
 253:Core/Src/main.c **** 
 366              		.loc 1 253 3 view .LVU94
 367 0048 019A     		ldr	r2, [sp, #4]
 368              	.LBE11:
 253:Core/Src/main.c **** 
 369              		.loc 1 253 3 view .LVU95
 258:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 370              		.loc 1 258 3 view .LVU96
 258:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 371              		.loc 1 258 36 is_stmt 0 view .LVU97
 372 004a 0221     		movs	r1, #2
 373 004c 0791     		str	r1, [sp, #28]
 259:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 374              		.loc 1 259 3 is_stmt 1 view .LVU98
 259:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 375              		.loc 1 259 30 is_stmt 0 view .LVU99
 376 004e 0122     		movs	r2, #1
 377 0050 0A92     		str	r2, [sp, #40]
 260:Core/Src/main.c ****   //RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 378              		.loc 1 260 3 is_stmt 1 view .LVU100
 260:Core/Src/main.c ****   //RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 379              		.loc 1 260 41 is_stmt 0 view .LVU101
 380 0052 1022     		movs	r2, #16
 381 0054 0B92     		str	r2, [sp, #44]
 262:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 382              		.loc 1 262 3 is_stmt 1 view .LVU102
 262:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 383              		.loc 1 262 34 is_stmt 0 view .LVU103
 384 0056 0D91     		str	r1, [sp, #52]
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 385              		.loc 1 263 3 is_stmt 1 view .LVU104
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 386              		.loc 1 263 35 is_stmt 0 view .LVU105
 387 0058 0E93     		str	r3, [sp, #56]
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 388              		.loc 1 264 3 is_stmt 1 view .LVU106
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 389              		.loc 1 264 30 is_stmt 0 view .LVU107
 390 005a 0F92     		str	r2, [sp, #60]
 265:Core/Src/main.c ****   // 16 MHz * 336 / 4 = 84 MHz
 391              		.loc 1 265 3 is_stmt 1 view .LVU108
 265:Core/Src/main.c ****   // 16 MHz * 336 / 4 = 84 MHz
 392              		.loc 1 265 30 is_stmt 0 view .LVU109
 393 005c 4FF4A873 		mov	r3, #336
 394 0060 1093     		str	r3, [sp, #64]
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 395              		.loc 1 267 3 is_stmt 1 view .LVU110
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 396              		.loc 1 267 30 is_stmt 0 view .LVU111
 397 0062 0423     		movs	r3, #4
 398 0064 1193     		str	r3, [sp, #68]
 268:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 33


 399              		.loc 1 268 3 is_stmt 1 view .LVU112
 268:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 400              		.loc 1 268 30 is_stmt 0 view .LVU113
 401 0066 0723     		movs	r3, #7
 402 0068 1293     		str	r3, [sp, #72]
 269:Core/Src/main.c ****   {
 403              		.loc 1 269 3 is_stmt 1 view .LVU114
 269:Core/Src/main.c ****   {
 404              		.loc 1 269 7 is_stmt 0 view .LVU115
 405 006a 07A8     		add	r0, sp, #28
 406 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 407              	.LVL6:
 269:Core/Src/main.c ****   {
 408              		.loc 1 269 6 discriminator 1 view .LVU116
 409 0070 80B9     		cbnz	r0, .L17
 276:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 410              		.loc 1 276 3 is_stmt 1 view .LVU117
 276:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 411              		.loc 1 276 31 is_stmt 0 view .LVU118
 412 0072 0F23     		movs	r3, #15
 413 0074 0293     		str	r3, [sp, #8]
 279:Core/Src/main.c ****   //HCLK=84 MHz
 414              		.loc 1 279 3 is_stmt 1 view .LVU119
 279:Core/Src/main.c ****   //HCLK=84 MHz
 415              		.loc 1 279 34 is_stmt 0 view .LVU120
 416 0076 0223     		movs	r3, #2
 417 0078 0393     		str	r3, [sp, #12]
 281:Core/Src/main.c ****   //APB1=42 MHz
 418              		.loc 1 281 3 is_stmt 1 view .LVU121
 281:Core/Src/main.c ****   //APB1=42 MHz
 419              		.loc 1 281 35 is_stmt 0 view .LVU122
 420 007a 0021     		movs	r1, #0
 421 007c 0491     		str	r1, [sp, #16]
 283:Core/Src/main.c ****   //APB2=84 MHz
 422              		.loc 1 283 3 is_stmt 1 view .LVU123
 283:Core/Src/main.c ****   //APB2=84 MHz
 423              		.loc 1 283 36 is_stmt 0 view .LVU124
 424 007e 4FF48053 		mov	r3, #4096
 425 0082 0593     		str	r3, [sp, #20]
 285:Core/Src/main.c **** 
 426              		.loc 1 285 3 is_stmt 1 view .LVU125
 285:Core/Src/main.c **** 
 427              		.loc 1 285 36 is_stmt 0 view .LVU126
 428 0084 0691     		str	r1, [sp, #24]
 287:Core/Src/main.c ****   {
 429              		.loc 1 287 3 is_stmt 1 view .LVU127
 287:Core/Src/main.c ****   {
 430              		.loc 1 287 7 is_stmt 0 view .LVU128
 431 0086 02A8     		add	r0, sp, #8
 432 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 433              	.LVL7:
 287:Core/Src/main.c ****   {
 434              		.loc 1 287 6 discriminator 1 view .LVU129
 435 008c 20B9     		cbnz	r0, .L18
 291:Core/Src/main.c **** 
 436              		.loc 1 291 1 view .LVU130
 437 008e 15B0     		add	sp, sp, #84
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 34


 438              	.LCFI9:
 439              		.cfi_remember_state
 440              		.cfi_def_cfa_offset 4
 441              		@ sp needed
 442 0090 5DF804FB 		ldr	pc, [sp], #4
 443              	.L17:
 444              	.LCFI10:
 445              		.cfi_restore_state
 271:Core/Src/main.c ****   }
 446              		.loc 1 271 5 is_stmt 1 view .LVU131
 447 0094 FFF7FEFF 		bl	Error_Handler
 448              	.LVL8:
 449              	.L18:
 289:Core/Src/main.c ****   }
 450              		.loc 1 289 5 view .LVU132
 451 0098 FFF7FEFF 		bl	Error_Handler
 452              	.LVL9:
 453              	.L20:
 454              		.align	2
 455              	.L19:
 456 009c 00380240 		.word	1073887232
 457 00a0 00700040 		.word	1073770496
 458              		.cfi_endproc
 459              	.LFE138:
 461              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 462              		.align	2
 463              	.LC0:
 464 0000 434F4E4E 		.ascii	"CONNECT\000"
 464      45435400 
 465              		.align	2
 466              	.LC1:
 467 0008 4F4B0A00 		.ascii	"OK\012\000"
 468              		.align	2
 469              	.LC2:
 470 000c 4552524F 		.ascii	"ERROR\012\000"
 470      520A00
 471 0013 00       		.align	2
 472              	.LC3:
 473 0014 44495343 		.ascii	"DISCONNECT\000"
 473      4F4E4E45 
 473      435400
 474 001f 00       		.align	2
 475              	.LC4:
 476 0020 4745545F 		.ascii	"GET_CODE_\000"
 476      434F4445 
 476      5F00
 477 002a 0000     		.align	2
 478              	.LC5:
 479 002c 434F4445 		.ascii	"CODE:%s\012\000"
 479      3A25730A 
 479      00
 480 0035 000000   		.align	2
 481              	.LC6:
 482 0038 4E4F545F 		.ascii	"NOT_FOUND\012\000"
 482      464F554E 
 482      440A00
 483 0043 00       		.align	2
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 35


 484              	.LC7:
 485 0044 5345545F 		.ascii	"SET_CODE_\000"
 485      434F4445 
 485      5F00
 486 004e 0000     		.align	2
 487              	.LC8:
 488 0050 53415645 		.ascii	"SAVED\012\000"
 488      440A00
 489              		.section	.text.main,"ax",%progbits
 490              		.align	1
 491              		.global	main
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 496              	main:
 497              	.LFB137:
  82:Core/Src/main.c **** 
 498              		.loc 1 82 1 view -0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 568
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502 0000 30B5     		push	{r4, r5, lr}
 503              	.LCFI11:
 504              		.cfi_def_cfa_offset 12
 505              		.cfi_offset 4, -12
 506              		.cfi_offset 5, -8
 507              		.cfi_offset 14, -4
 508 0002 ADF50F7D 		sub	sp, sp, #572
 509              	.LCFI12:
 510              		.cfi_def_cfa_offset 584
  91:Core/Src/main.c **** 
 511              		.loc 1 91 3 view .LVU134
 512 0006 FFF7FEFF 		bl	HAL_Init
 513              	.LVL10:
  98:Core/Src/main.c **** 
 514              		.loc 1 98 3 view .LVU135
 515 000a FFF7FEFF 		bl	SystemClock_Config
 516              	.LVL11:
 105:Core/Src/main.c ****   MX_USART1_UART_Init();
 517              		.loc 1 105 3 view .LVU136
 518 000e FFF7FEFF 		bl	MX_GPIO_Init
 519              	.LVL12:
 106:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 520              		.loc 1 106 3 view .LVU137
 521 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 522              	.LVL13:
 111:Core/Src/main.c ****   memset(accessCodes, 0, sizeof(accessCodes));  // initialize all codes as empty
 523              		.loc 1 111 3 view .LVU138
 112:Core/Src/main.c **** 
 524              		.loc 1 112 3 view .LVU139
 525 0016 40F22F12 		movw	r2, #303
 526 001a 0021     		movs	r1, #0
 527 001c 42A8     		add	r0, sp, #264
 528 001e FFF7FEFF 		bl	memset
 529              	.LVL14:
 115:Core/Src/main.c **** 
 530              		.loc 1 115 3 view .LVU140
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 36


 115:Core/Src/main.c **** 
 531              		.loc 1 115 8 is_stmt 0 view .LVU141
 532 0022 0025     		movs	r5, #0
 533              	.LVL15:
 534              	.L38:
 118:Core/Src/main.c **** 
 535              		.loc 1 118 3 is_stmt 1 view .LVU142
 124:Core/Src/main.c ****   {
 536              		.loc 1 124 3 view .LVU143
 537              	.LBB12:
 130:Core/Src/main.c **** 	    uint16_t i = 0;
 538              		.loc 1 130 6 view .LVU144
 131:Core/Src/main.c **** 	    // Read characters one by one until newline ('\n') is received
 539              		.loc 1 131 6 view .LVU145
 131:Core/Src/main.c **** 	    // Read characters one by one until newline ('\n') is received
 540              		.loc 1 131 15 is_stmt 0 view .LVU146
 541 0024 0024     		movs	r4, #0
 542              	.LVL16:
 543              	.L22:
 133:Core/Src/main.c **** 	      if (HAL_UART_Receive(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY) != HAL_OK) {
 544              		.loc 1 133 6 is_stmt 1 view .LVU147
 134:Core/Src/main.c **** 	        Error_Handler();  // In case of UART error, halt (could also continue to next loop)
 545              		.loc 1 134 8 view .LVU148
 134:Core/Src/main.c **** 	        Error_Handler();  // In case of UART error, halt (could also continue to next loop)
 546              		.loc 1 134 12 is_stmt 0 view .LVU149
 547 0026 4FF0FF33 		mov	r3, #-1
 548 002a 0122     		movs	r2, #1
 549 002c 0DF10701 		add	r1, sp, #7
 550 0030 6148     		ldr	r0, .L45
 551 0032 FFF7FEFF 		bl	HAL_UART_Receive
 552              	.LVL17:
 134:Core/Src/main.c **** 	        Error_Handler();  // In case of UART error, halt (could also continue to next loop)
 553              		.loc 1 134 11 discriminator 1 view .LVU150
 554 0036 60B9     		cbnz	r0, .L40
 137:Core/Src/main.c **** 	    	  // skip carriage return if present
 555              		.loc 1 137 8 is_stmt 1 view .LVU151
 137:Core/Src/main.c **** 	    	  // skip carriage return if present
 556              		.loc 1 137 14 is_stmt 0 view .LVU152
 557 0038 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 137:Core/Src/main.c **** 	    	  // skip carriage return if present
 558              		.loc 1 137 11 view .LVU153
 559 003c 0D2B     		cmp	r3, #13
 560 003e F2D0     		beq	.L22
 141:Core/Src/main.c **** 	    	  // newline indicates end of command
 561              		.loc 1 141 8 is_stmt 1 view .LVU154
 141:Core/Src/main.c **** 	    	  // newline indicates end of command
 562              		.loc 1 141 11 is_stmt 0 view .LVU155
 563 0040 0A2B     		cmp	r3, #10
 564 0042 0BD0     		beq	.L25
 145:Core/Src/main.c **** 	    	  // append character to buffer if space allows
 565              		.loc 1 145 8 is_stmt 1 view .LVU156
 145:Core/Src/main.c **** 	    	  // append character to buffer if space allows
 566              		.loc 1 145 11 is_stmt 0 view .LVU157
 567 0044 7E2C     		cmp	r4, #126
 568 0046 06D8     		bhi	.L26
 147:Core/Src/main.c **** 	      } else {
 569              		.loc 1 147 10 is_stmt 1 view .LVU158
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 37


 147:Core/Src/main.c **** 	      } else {
 570              		.loc 1 147 20 is_stmt 0 view .LVU159
 571 0048 621C     		adds	r2, r4, #1
 572              	.LVL18:
 147:Core/Src/main.c **** 	      } else {
 573              		.loc 1 147 24 view .LVU160
 574 004a 22A9     		add	r1, sp, #136
 575 004c 0B55     		strb	r3, [r1, r4]
 147:Core/Src/main.c **** 	      } else {
 576              		.loc 1 147 20 view .LVU161
 577 004e 94B2     		uxth	r4, r2
 578 0050 E9E7     		b	.L22
 579              	.LVL19:
 580              	.L40:
 135:Core/Src/main.c **** 	      }
 581              		.loc 1 135 10 is_stmt 1 view .LVU162
 582 0052 FFF7FEFF 		bl	Error_Handler
 583              	.LVL20:
 584              	.L26:
 150:Core/Src/main.c **** 	        break;
 585              		.loc 1 150 10 view .LVU163
 150:Core/Src/main.c **** 	        break;
 586              		.loc 1 150 22 is_stmt 0 view .LVU164
 587 0056 22AB     		add	r3, sp, #136
 588 0058 0022     		movs	r2, #0
 589 005a 1A55     		strb	r2, [r3, r4]
 151:Core/Src/main.c **** 	      }
 590              		.loc 1 151 10 is_stmt 1 view .LVU165
 591              	.L25:
 155:Core/Src/main.c **** 
 592              		.loc 1 155 6 view .LVU166
 155:Core/Src/main.c **** 
 593              		.loc 1 155 18 is_stmt 0 view .LVU167
 594 005c 22A8     		add	r0, sp, #136
 595 005e 0023     		movs	r3, #0
 596 0060 0355     		strb	r3, [r0, r4]
 158:Core/Src/main.c **** 	      // CONNECT command: establish connection
 597              		.loc 1 158 6 is_stmt 1 view .LVU168
 158:Core/Src/main.c **** 	      // CONNECT command: establish connection
 598              		.loc 1 158 10 is_stmt 0 view .LVU169
 599 0062 5649     		ldr	r1, .L45+4
 600 0064 FFF7FEFF 		bl	strcmp
 601              	.LVL21:
 158:Core/Src/main.c **** 	      // CONNECT command: establish connection
 602              		.loc 1 158 9 discriminator 1 view .LVU170
 603 0068 0028     		cmp	r0, #0
 604 006a 33D0     		beq	.L41
 164:Core/Src/main.c **** 	      // if not connected yet, only CONNECT is valid and respond with error for any other command
 605              		.loc 1 164 11 is_stmt 1 view .LVU171
 164:Core/Src/main.c **** 	      // if not connected yet, only CONNECT is valid and respond with error for any other command
 606              		.loc 1 164 14 is_stmt 0 view .LVU172
 607 006c 002D     		cmp	r5, #0
 608 006e 3AD0     		beq	.L42
 169:Core/Src/main.c **** 	      // DISCONNECT command: end session
 609              		.loc 1 169 11 is_stmt 1 view .LVU173
 169:Core/Src/main.c **** 	      // DISCONNECT command: end session
 610              		.loc 1 169 15 is_stmt 0 view .LVU174
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 38


 611 0070 5349     		ldr	r1, .L45+8
 612 0072 22A8     		add	r0, sp, #136
 613 0074 FFF7FEFF 		bl	strcmp
 614              	.LVL22:
 169:Core/Src/main.c **** 	      // DISCONNECT command: end session
 615              		.loc 1 169 14 discriminator 1 view .LVU175
 616 0078 0028     		cmp	r0, #0
 617 007a 3CD0     		beq	.L43
 176:Core/Src/main.c **** 	      // GET_CODE_n command: retrieve a code if it exists
 618              		.loc 1 176 11 is_stmt 1 view .LVU176
 176:Core/Src/main.c **** 	      // GET_CODE_n command: retrieve a code if it exists
 619              		.loc 1 176 15 is_stmt 0 view .LVU177
 620 007c 0922     		movs	r2, #9
 621 007e 5149     		ldr	r1, .L45+12
 622 0080 22A8     		add	r0, sp, #136
 623 0082 FFF7FEFF 		bl	strncmp
 624              	.LVL23:
 176:Core/Src/main.c **** 	      // GET_CODE_n command: retrieve a code if it exists
 625              		.loc 1 176 14 discriminator 1 view .LVU178
 626 0086 0028     		cmp	r0, #0
 627 0088 4ED1     		bne	.L31
 628              	.LBB13:
 180:Core/Src/main.c **** 
 629              		.loc 1 180 8 is_stmt 1 view .LVU179
 180:Core/Src/main.c **** 
 630              		.loc 1 180 13 is_stmt 0 view .LVU180
 631 008a 9DF89120 		ldrb	r2, [sp, #145]	@ zero_extendqisi2
 632              	.LVL24:
 182:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 633              		.loc 1 182 8 is_stmt 1 view .LVU181
 182:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 634              		.loc 1 182 34 is_stmt 0 view .LVU182
 635 008e A2F13103 		sub	r3, r2, #49
 636 0092 DBB2     		uxtb	r3, r3
 182:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 637              		.loc 1 182 11 view .LVU183
 638 0094 022B     		cmp	r3, #2
 639 0096 3FD8     		bhi	.L32
 182:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 640              		.loc 1 182 70 discriminator 1 view .LVU184
 641 0098 9DF89230 		ldrb	r3, [sp, #146]	@ zero_extendqisi2
 182:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 642              		.loc 1 182 59 discriminator 1 view .LVU185
 643 009c 002B     		cmp	r3, #0
 644 009e 3BD1     		bne	.L32
 645              	.LBB14:
 184:Core/Src/main.c **** 
 646              		.loc 1 184 10 is_stmt 1 view .LVU186
 184:Core/Src/main.c **** 
 647              		.loc 1 184 14 is_stmt 0 view .LVU187
 648 00a0 313A     		subs	r2, r2, #49
 649              	.LVL25:
 186:Core/Src/main.c **** 	          // if code exists send it back prefixed with "CODE:"
 650              		.loc 1 186 10 is_stmt 1 view .LVU188
 186:Core/Src/main.c **** 	          // if code exists send it back prefixed with "CODE:"
 651              		.loc 1 186 30 is_stmt 0 view .LVU189
 652 00a2 6523     		movs	r3, #101
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 39


 653 00a4 02FB03F3 		mul	r3, r2, r3
 654 00a8 42A9     		add	r1, sp, #264
 655 00aa CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 186:Core/Src/main.c **** 	          // if code exists send it back prefixed with "CODE:"
 656              		.loc 1 186 13 view .LVU190
 657 00ac 63B3     		cbz	r3, .L33
 658              	.LBB15:
 188:Core/Src/main.c **** 	          snprintf(codeBuff, sizeof(codeBuff), "CODE:%s\n", accessCodes[idx]);
 659              		.loc 1 188 12 is_stmt 1 view .LVU191
 189:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)codeBuff, strlen(codeBuff), HAL_MAX_DELAY);
 660              		.loc 1 189 12 view .LVU192
 661 00ae 6523     		movs	r3, #101
 662 00b0 03FB0213 		mla	r3, r3, r2, r1
 663 00b4 444A     		ldr	r2, .L45+16
 664              	.LVL26:
 189:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)codeBuff, strlen(codeBuff), HAL_MAX_DELAY);
 665              		.loc 1 189 12 is_stmt 0 view .LVU193
 666 00b6 8021     		movs	r1, #128
 667 00b8 02A8     		add	r0, sp, #8
 668 00ba FFF7FEFF 		bl	snprintf
 669              	.LVL27:
 190:Core/Src/main.c **** 	        } else {
 670              		.loc 1 190 12 is_stmt 1 view .LVU194
 190:Core/Src/main.c **** 	        } else {
 671              		.loc 1 190 59 is_stmt 0 view .LVU195
 672 00be 02A8     		add	r0, sp, #8
 673 00c0 FFF7FEFF 		bl	strlen
 674              	.LVL28:
 190:Core/Src/main.c **** 	        } else {
 675              		.loc 1 190 12 discriminator 1 view .LVU196
 676 00c4 4FF0FF33 		mov	r3, #-1
 677 00c8 82B2     		uxth	r2, r0
 678 00ca 02A9     		add	r1, sp, #8
 679 00cc 3A48     		ldr	r0, .L45
 680 00ce FFF7FEFF 		bl	HAL_UART_Transmit
 681              	.LVL29:
 682              	.LBE15:
 683 00d2 A7E7     		b	.L38
 684              	.LVL30:
 685              	.L41:
 190:Core/Src/main.c **** 	        } else {
 686              		.loc 1 190 12 discriminator 1 view .LVU197
 687              	.LBE14:
 688              	.LBE13:
 689              	.LBB19:
 160:Core/Src/main.c **** 	      const char *resp = "OK\n";
 690              		.loc 1 160 8 is_stmt 1 view .LVU198
 161:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 691              		.loc 1 161 8 view .LVU199
 162:Core/Src/main.c **** 	    }
 692              		.loc 1 162 8 view .LVU200
 162:Core/Src/main.c **** 	    }
 693              		.loc 1 162 8 is_stmt 0 discriminator 1 view .LVU201
 694 00d4 4FF0FF33 		mov	r3, #-1
 695 00d8 0322     		movs	r2, #3
 696 00da 3C49     		ldr	r1, .L45+20
 697 00dc 3648     		ldr	r0, .L45
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 40


 698 00de FFF7FEFF 		bl	HAL_UART_Transmit
 699              	.LVL31:
 160:Core/Src/main.c **** 	      const char *resp = "OK\n";
 700              		.loc 1 160 18 view .LVU202
 701 00e2 0125     		movs	r5, #1
 702              	.LBE19:
 703 00e4 9EE7     		b	.L38
 704              	.LVL32:
 705              	.L42:
 706              	.LBB20:
 166:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 707              		.loc 1 166 8 is_stmt 1 view .LVU203
 167:Core/Src/main.c **** 	    }
 708              		.loc 1 167 8 view .LVU204
 167:Core/Src/main.c **** 	    }
 709              		.loc 1 167 8 is_stmt 0 discriminator 1 view .LVU205
 710 00e6 4FF0FF33 		mov	r3, #-1
 711 00ea 0622     		movs	r2, #6
 712 00ec 3849     		ldr	r1, .L45+24
 713 00ee 3248     		ldr	r0, .L45
 714 00f0 FFF7FEFF 		bl	HAL_UART_Transmit
 715              	.LVL33:
 716              	.LBE20:
 717 00f4 96E7     		b	.L38
 718              	.LVL34:
 719              	.L43:
 720              	.LBB21:
 171:Core/Src/main.c **** 	      const char *resp = "OK\n";
 721              		.loc 1 171 8 is_stmt 1 view .LVU206
 172:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 722              		.loc 1 172 8 view .LVU207
 173:Core/Src/main.c **** 	      // after disconnect the device stays running and can accept a new CONNECT
 723              		.loc 1 173 8 view .LVU208
 173:Core/Src/main.c **** 	      // after disconnect the device stays running and can accept a new CONNECT
 724              		.loc 1 173 8 is_stmt 0 discriminator 1 view .LVU209
 725 00f6 4FF0FF33 		mov	r3, #-1
 726 00fa 0322     		movs	r2, #3
 727 00fc 3349     		ldr	r1, .L45+20
 728 00fe 2E48     		ldr	r0, .L45
 729 0100 FFF7FEFF 		bl	HAL_UART_Transmit
 730              	.LVL35:
 171:Core/Src/main.c **** 	      const char *resp = "OK\n";
 731              		.loc 1 171 18 view .LVU210
 732 0104 0025     		movs	r5, #0
 733              	.LBE21:
 734 0106 8DE7     		b	.L38
 735              	.LVL36:
 736              	.L33:
 737              	.LBB22:
 738              	.LBB17:
 739              	.LBB16:
 193:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 740              		.loc 1 193 12 is_stmt 1 view .LVU211
 194:Core/Src/main.c **** 	        }
 741              		.loc 1 194 12 view .LVU212
 194:Core/Src/main.c **** 	        }
 742              		.loc 1 194 12 is_stmt 0 discriminator 1 view .LVU213
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 41


 743 0108 4FF0FF33 		mov	r3, #-1
 744 010c 0A22     		movs	r2, #10
 745              	.LVL37:
 194:Core/Src/main.c **** 	        }
 746              		.loc 1 194 12 discriminator 1 view .LVU214
 747 010e 3149     		ldr	r1, .L45+28
 748 0110 2948     		ldr	r0, .L45
 749 0112 FFF7FEFF 		bl	HAL_UART_Transmit
 750              	.LVL38:
 194:Core/Src/main.c **** 	        }
 751              		.loc 1 194 12 discriminator 1 view .LVU215
 752 0116 85E7     		b	.L38
 753              	.LVL39:
 754              	.L32:
 194:Core/Src/main.c **** 	        }
 755              		.loc 1 194 12 discriminator 1 view .LVU216
 756              	.LBE16:
 757              	.LBE17:
 758              	.LBB18:
 198:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 759              		.loc 1 198 10 is_stmt 1 view .LVU217
 199:Core/Src/main.c **** 	      }
 760              		.loc 1 199 10 view .LVU218
 199:Core/Src/main.c **** 	      }
 761              		.loc 1 199 10 is_stmt 0 discriminator 1 view .LVU219
 762 0118 4FF0FF33 		mov	r3, #-1
 763 011c 0622     		movs	r2, #6
 764              	.LVL40:
 199:Core/Src/main.c **** 	      }
 765              		.loc 1 199 10 discriminator 1 view .LVU220
 766 011e 2C49     		ldr	r1, .L45+24
 767 0120 2548     		ldr	r0, .L45
 768 0122 FFF7FEFF 		bl	HAL_UART_Transmit
 769              	.LVL41:
 199:Core/Src/main.c **** 	      }
 770              		.loc 1 199 10 discriminator 1 view .LVU221
 771 0126 7DE7     		b	.L38
 772              	.LVL42:
 773              	.L31:
 199:Core/Src/main.c **** 	      }
 774              		.loc 1 199 10 discriminator 1 view .LVU222
 775              	.LBE18:
 776              	.LBE22:
 202:Core/Src/main.c **** 	      // SET_CODE_n:value command: store a new code value
 777              		.loc 1 202 11 is_stmt 1 view .LVU223
 202:Core/Src/main.c **** 	      // SET_CODE_n:value command: store a new code value
 778              		.loc 1 202 15 is_stmt 0 view .LVU224
 779 0128 0922     		movs	r2, #9
 780 012a 2B49     		ldr	r1, .L45+32
 781 012c 22A8     		add	r0, sp, #136
 782 012e FFF7FEFF 		bl	strncmp
 783              	.LVL43:
 202:Core/Src/main.c **** 	      // SET_CODE_n:value command: store a new code value
 784              		.loc 1 202 14 discriminator 1 view .LVU225
 785 0132 C0BB     		cbnz	r0, .L34
 786              	.LBB23:
 205:Core/Src/main.c **** 
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 42


 787              		.loc 1 205 8 is_stmt 1 view .LVU226
 205:Core/Src/main.c **** 
 788              		.loc 1 205 13 is_stmt 0 view .LVU227
 789 0134 9DF89120 		ldrb	r2, [sp, #145]	@ zero_extendqisi2
 790              	.LVL44:
 207:Core/Src/main.c **** 	    	  // target index 0-2
 791              		.loc 1 207 8 is_stmt 1 view .LVU228
 207:Core/Src/main.c **** 	    	  // target index 0-2
 792              		.loc 1 207 34 is_stmt 0 view .LVU229
 793 0138 A2F13103 		sub	r3, r2, #49
 794 013c DBB2     		uxtb	r3, r3
 207:Core/Src/main.c **** 	    	  // target index 0-2
 795              		.loc 1 207 11 view .LVU230
 796 013e 022B     		cmp	r3, #2
 797 0140 03D8     		bhi	.L35
 207:Core/Src/main.c **** 	    	  // target index 0-2
 798              		.loc 1 207 70 discriminator 1 view .LVU231
 799 0142 9DF89230 		ldrb	r3, [sp, #146]	@ zero_extendqisi2
 207:Core/Src/main.c **** 	    	  // target index 0-2
 800              		.loc 1 207 59 discriminator 1 view .LVU232
 801 0146 3A2B     		cmp	r3, #58
 802 0148 07D0     		beq	.L44
 803              	.L35:
 804              	.LBB24:
 225:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 805              		.loc 1 225 10 is_stmt 1 view .LVU233
 806              	.LVL45:
 226:Core/Src/main.c **** 	      }
 807              		.loc 1 226 10 view .LVU234
 226:Core/Src/main.c **** 	      }
 808              		.loc 1 226 10 is_stmt 0 discriminator 1 view .LVU235
 809 014a 4FF0FF33 		mov	r3, #-1
 810 014e 0622     		movs	r2, #6
 811              	.LVL46:
 226:Core/Src/main.c **** 	      }
 812              		.loc 1 226 10 discriminator 1 view .LVU236
 813 0150 1F49     		ldr	r1, .L45+24
 814 0152 1948     		ldr	r0, .L45
 815 0154 FFF7FEFF 		bl	HAL_UART_Transmit
 816              	.LVL47:
 226:Core/Src/main.c **** 	      }
 817              		.loc 1 226 10 discriminator 1 view .LVU237
 818 0158 64E7     		b	.L38
 819              	.LVL48:
 820              	.L44:
 226:Core/Src/main.c **** 	      }
 821              		.loc 1 226 10 discriminator 1 view .LVU238
 822              	.LBE24:
 823              	.LBB25:
 209:Core/Src/main.c **** 	        // pointer to the code value after the SET_CODE_n prefix
 824              		.loc 1 209 10 is_stmt 1 view .LVU239
 209:Core/Src/main.c **** 	        // pointer to the code value after the SET_CODE_n prefix
 825              		.loc 1 209 14 is_stmt 0 view .LVU240
 826 015a A2F13104 		sub	r4, r2, #49
 827              	.LVL49:
 211:Core/Src/main.c **** 	        // save the new code up to MAX_Len characters
 828              		.loc 1 211 10 is_stmt 1 view .LVU241
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 43


 213:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 829              		.loc 1 213 10 view .LVU242
 213:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 830              		.loc 1 213 14 is_stmt 0 view .LVU243
 831 015e 0DF19300 		add	r0, sp, #147
 832              	.LVL50:
 213:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 833              		.loc 1 213 14 view .LVU244
 834 0162 FFF7FEFF 		bl	strlen
 835              	.LVL51:
 213:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 836              		.loc 1 213 13 discriminator 1 view .LVU245
 837 0166 6428     		cmp	r0, #100
 838 0168 0FD8     		bhi	.L36
 214:Core/Src/main.c **** 	        } else {
 839              		.loc 1 214 12 is_stmt 1 view .LVU246
 840 016a 0DF19301 		add	r1, sp, #147
 841              	.LVL52:
 214:Core/Src/main.c **** 	        } else {
 842              		.loc 1 214 12 is_stmt 0 view .LVU247
 843 016e 6520     		movs	r0, #101
 844 0170 42AB     		add	r3, sp, #264
 845 0172 00FB0430 		mla	r0, r0, r4, r3
 846 0176 FFF7FEFF 		bl	strcpy
 847              	.LVL53:
 848              	.L37:
 221:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 849              		.loc 1 221 10 is_stmt 1 view .LVU248
 222:Core/Src/main.c **** 	      } else {
 850              		.loc 1 222 10 view .LVU249
 222:Core/Src/main.c **** 	      } else {
 851              		.loc 1 222 10 is_stmt 0 discriminator 1 view .LVU250
 852 017a 4FF0FF33 		mov	r3, #-1
 853 017e 0622     		movs	r2, #6
 854 0180 1649     		ldr	r1, .L45+36
 855 0182 0D48     		ldr	r0, .L45
 856 0184 FFF7FEFF 		bl	HAL_UART_Transmit
 857              	.LVL54:
 858              	.LBE25:
 207:Core/Src/main.c **** 	    	  // target index 0-2
 859              		.loc 1 207 83 view .LVU251
 860 0188 4CE7     		b	.L38
 861              	.LVL55:
 862              	.L36:
 863              	.LBB26:
 216:Core/Src/main.c **** 	          // ensure termination if truncated
 864              		.loc 1 216 12 is_stmt 1 view .LVU252
 216:Core/Src/main.c **** 	          // ensure termination if truncated
 865              		.loc 1 216 31 is_stmt 0 view .LVU253
 866 018a 6523     		movs	r3, #101
 867 018c 42AA     		add	r2, sp, #264
 868 018e 03FB0424 		mla	r4, r3, r4, r2
 869              	.LVL56:
 216:Core/Src/main.c **** 	          // ensure termination if truncated
 870              		.loc 1 216 12 view .LVU254
 871 0192 6422     		movs	r2, #100
 872 0194 0DF19301 		add	r1, sp, #147
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 44


 873              	.LVL57:
 216:Core/Src/main.c **** 	          // ensure termination if truncated
 874              		.loc 1 216 12 view .LVU255
 875 0198 2046     		mov	r0, r4
 876 019a FFF7FEFF 		bl	strncpy
 877              	.LVL58:
 218:Core/Src/main.c **** 	        }
 878              		.loc 1 218 12 is_stmt 1 view .LVU256
 218:Core/Src/main.c **** 	        }
 879              		.loc 1 218 38 is_stmt 0 view .LVU257
 880 019e 0023     		movs	r3, #0
 881 01a0 84F86430 		strb	r3, [r4, #100]
 882 01a4 E9E7     		b	.L37
 883              	.LVL59:
 884              	.L34:
 218:Core/Src/main.c **** 	        }
 885              		.loc 1 218 38 view .LVU258
 886              	.LBE26:
 887              	.LBE23:
 888              	.LBB27:
 231:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 889              		.loc 1 231 8 is_stmt 1 view .LVU259
 232:Core/Src/main.c **** 	    }
 890              		.loc 1 232 8 view .LVU260
 232:Core/Src/main.c **** 	    }
 891              		.loc 1 232 8 is_stmt 0 discriminator 1 view .LVU261
 892 01a6 4FF0FF33 		mov	r3, #-1
 893 01aa 0622     		movs	r2, #6
 894 01ac 0849     		ldr	r1, .L45+24
 895 01ae 0248     		ldr	r0, .L45
 896 01b0 FFF7FEFF 		bl	HAL_UART_Transmit
 897              	.LVL60:
 232:Core/Src/main.c **** 	    }
 898              		.loc 1 232 8 discriminator 1 view .LVU262
 899              	.LBE27:
 900              	.LBE12:
 124:Core/Src/main.c ****   {
 901              		.loc 1 124 9 is_stmt 1 view .LVU263
 125:Core/Src/main.c ****     /* USER CODE END WHILE */
 902              		.loc 1 125 3 is_stmt 0 view .LVU264
 903 01b4 36E7     		b	.L38
 904              	.L46:
 905 01b6 00BF     		.align	2
 906              	.L45:
 907 01b8 00000000 		.word	huart1
 908 01bc 00000000 		.word	.LC0
 909 01c0 14000000 		.word	.LC3
 910 01c4 20000000 		.word	.LC4
 911 01c8 2C000000 		.word	.LC5
 912 01cc 08000000 		.word	.LC1
 913 01d0 0C000000 		.word	.LC2
 914 01d4 38000000 		.word	.LC6
 915 01d8 44000000 		.word	.LC7
 916 01dc 50000000 		.word	.LC8
 917              		.cfi_endproc
 918              	.LFE137:
 920              		.global	huart1
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 45


 921              		.section	.bss.huart1,"aw",%nobits
 922              		.align	2
 925              	huart1:
 926 0000 00000000 		.space	72
 926      00000000 
 926      00000000 
 926      00000000 
 926      00000000 
 927              		.text
 928              	.Letext0:
 929              		.file 3 "\\\\?\\C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32
 930              		.file 4 "C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32CubeIDE
 931              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 932              		.file 6 "\\\\?\\C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32
 933              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 934              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 935              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 936              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 937              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 938              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 939              		.file 13 "C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32CubeID
 940              		.file 14 "C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32CubeID
 941              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 942              		.file 16 "<built-in>"
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:117    .text.MX_GPIO_Init:00000060 $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:123    .text.Error_Handler:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:129    .text.Error_Handler:00000000 Error_Handler
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:161    .text.MX_USART1_UART_Init:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:166    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:293    .text.MX_USART1_UART_Init:0000007c $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:925    .bss.huart1:00000000 huart1
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:301    .text.SystemClock_Config:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:307    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:456    .text.SystemClock_Config:0000009c $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:462    .rodata.main.str1.4:00000000 $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:490    .text.main:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:496    .text.main:00000000 main
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:907    .text.main:000001b8 $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccRJeOg4.s:922    .bss.huart1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_UART_Receive
strcmp
strncmp
snprintf
strlen
HAL_UART_Transmit
strcpy
strncpy
