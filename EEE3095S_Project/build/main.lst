ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB140:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** 	/* EEE3095S
  19:Core/Src/main.c **** 	 * CS Class Project 2025
  20:Core/Src/main.c **** 	 * PFFTAH001, SMLJOS008
  21:Core/Src/main.c **** 	 *
  22:Core/Src/main.c **** 	 * */
  23:Core/Src/main.c **** /* USER CODE END Header */
  24:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  25:Core/Src/main.c **** #include "main.h"
  26:Core/Src/main.c **** #include <string.h>
  27:Core/Src/main.c **** #include <stdbool.h>
  28:Core/Src/main.c **** #include <stdio.h>
  29:Core/Src/main.c **** //for the STM32F4
  30:Core/Src/main.c **** #include "stm32f4xx.h"
  31:Core/Src/main.c **** #include "stm32f4xx_hal.h"
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END Includes */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PTD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PD */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  49:Core/Src/main.c **** /* USER CODE BEGIN PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  54:Core/Src/main.c **** //UART handle for USART1
  55:Core/Src/main.c **** UART_HandleTypeDef huart1;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** //max length for each access code
  58:Core/Src/main.c **** #define MAX_LEN 100
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE BEGIN PV */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  65:Core/Src/main.c **** void SystemClock_Config(void);
  66:Core/Src/main.c **** static void MX_GPIO_Init(void);
  67:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  68:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END PFP */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  73:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END 0 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /**
  78:Core/Src/main.c ****   * @brief  The application entry point.
  79:Core/Src/main.c ****   * @retval int
  80:Core/Src/main.c ****   */
  81:Core/Src/main.c **** int main(void)
  82:Core/Src/main.c **** {
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  91:Core/Src/main.c ****   HAL_Init();
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END Init */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Configure the system clock */
  98:Core/Src/main.c ****   SystemClock_Config();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END SysInit */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Initialize all configured peripherals */
 105:Core/Src/main.c ****   MX_GPIO_Init();
 106:Core/Src/main.c ****   MX_USART1_UART_Init();
 107:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   //buffer for three access codes (each up to 100 chars + null terminator)
 111:Core/Src/main.c ****   char accessCodes[3][MAX_LEN + 1];
 112:Core/Src/main.c ****   memset(accessCodes, 0, sizeof(accessCodes));  // initialize all codes as empty
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   //connection state, true after connect false after disconnect
 115:Core/Src/main.c ****   bool connected = false;
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   //buffer for incoming UART data/ commands
 118:Core/Src/main.c ****   char rxBuffer[128];
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* USER CODE END 2 */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* Infinite loop */
 123:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 124:Core/Src/main.c ****   while (1)
 125:Core/Src/main.c ****   {
 126:Core/Src/main.c ****     /* USER CODE END WHILE */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 129:Core/Src/main.c **** 	    //receive a line (command) from UART
 130:Core/Src/main.c **** 	    char c;
 131:Core/Src/main.c **** 	    uint16_t i = 0;
 132:Core/Src/main.c **** 	    // Read characters one by one until newline ('\n') is received
 133:Core/Src/main.c **** 	    do {
 134:Core/Src/main.c **** 	      if (HAL_UART_Receive(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY) != HAL_OK) {
 135:Core/Src/main.c **** 	        Error_Handler();  // In case of UART error, halt (could also continue to next loop)
 136:Core/Src/main.c **** 	      }
 137:Core/Src/main.c **** 	      if (c == '\r') {
 138:Core/Src/main.c **** 	    	  // skip carriage return if present
 139:Core/Src/main.c **** 	        continue;
 140:Core/Src/main.c **** 	      }
 141:Core/Src/main.c **** 	      if (c == '\r' || c == '\n') {
 142:Core/Src/main.c **** 	    	  // newline indicates end of command
 143:Core/Src/main.c **** 	        break;
 144:Core/Src/main.c **** 	      }
 145:Core/Src/main.c **** 	      if (i < sizeof(rxBuffer) - 1) {
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 4


 146:Core/Src/main.c **** 	    	  // append character to buffer if space allows
 147:Core/Src/main.c **** 	        rxBuffer[i++] = c;
 148:Core/Src/main.c **** 	      } else {
 149:Core/Src/main.c **** 	        // buffer overflow if line too long then truncate and break
 150:Core/Src/main.c **** 	    	  rxBuffer[i] = '\0';
 151:Core/Src/main.c **** 	        break;
 152:Core/Src/main.c **** 	      }
 153:Core/Src/main.c **** 	    } while (1);
 154:Core/Src/main.c **** 	    // null-terminate the received string
 155:Core/Src/main.c **** 	    rxBuffer[i] = '\0';
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** 	    //parse and handle the command in rxBuff
 158:Core/Src/main.c **** 	    if (strcmp(rxBuffer, "CONNECT") == 0) {
 159:Core/Src/main.c **** 	      // CONNECT command: establish connection
 160:Core/Src/main.c **** 	      connected = true;
 161:Core/Src/main.c **** 	      const char *resp = "OK\r\n";
 162:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c **** 	    }
 165:Core/Src/main.c **** 	    else if (!connected) {
 166:Core/Src/main.c **** 	      // if not connected yet, only CONNECT is valid and respond with error for any other command
 167:Core/Src/main.c **** 	      const char *resp = "ERROR\r\n";
 168:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** 	    }
 171:Core/Src/main.c **** 	    else if (strcmp(rxBuffer, "DISCONNECT") == 0) {
 172:Core/Src/main.c **** 	      // DISCONNECT command: end session
 173:Core/Src/main.c **** 	      connected = false;
 174:Core/Src/main.c **** 	      const char *resp = "OK\r\n";
 175:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 176:Core/Src/main.c **** 
 177:Core/Src/main.c **** 	      // after disconnect the device stays running and can accept a new CONNECT
 178:Core/Src/main.c **** 	    }
 179:Core/Src/main.c **** 	    else if (strncmp(rxBuffer, "GET_CODE_", 9) == 0) {
 180:Core/Src/main.c **** 	      // GET_CODE_n command: retrieve a code if it exists
 181:Core/Src/main.c **** 	      // expect exactly one digit (1-3) after "GET_CODE_"
 182:Core/Src/main.c **** 	    	// the character representing code index
 183:Core/Src/main.c **** 	      char codeIndexChar = rxBuffer[9];
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** 	      if ((codeIndexChar >= '1' && codeIndexChar <= '3') && rxBuffer[10] == '\0') {
 186:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 187:Core/Src/main.c **** 	        int idx = codeIndexChar - '1';
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** 	        if (accessCodes[idx][0] != '\0') {
 190:Core/Src/main.c **** 	          // if code exists send it back prefixed with "CODE:"
 191:Core/Src/main.c **** 	          char txBuffer[128];
 192:Core/Src/main.c **** 	          snprintf(txBuffer, sizeof(txBuffer), "CODE:%s\r\n", accessCodes[idx]);
 193:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 194:Core/Src/main.c **** 
 195:Core/Src/main.c **** 	        } else {
 196:Core/Src/main.c **** 	          // if code not set respond with NOT_FOUND
 197:Core/Src/main.c **** 	          const char *resp = "NOT_FOUND\r\n";
 198:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 199:Core/Src/main.c **** 
 200:Core/Src/main.c **** 	        }
 201:Core/Src/main.c **** 	      } else {
 202:Core/Src/main.c **** 	        // error in GET_CODE command such as invalid index or extra characters
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 5


 203:Core/Src/main.c **** 	        const char *resp = "ERROR\r\n";
 204:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** 	      }
 207:Core/Src/main.c **** 	    }
 208:Core/Src/main.c **** 	    else if (strncmp(rxBuffer, "SET_CODE_", 9) == 0) {
 209:Core/Src/main.c **** 	      // SET_CODE_n:value command: store a new code value
 210:Core/Src/main.c **** 	    	// the character representing code index
 211:Core/Src/main.c **** 	      char codeIndexChar = rxBuffer[9];
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** 	      if ((codeIndexChar >= '1' && codeIndexChar <= '3') && rxBuffer[10] == ':') {
 214:Core/Src/main.c **** 	    	  // target index 0-2
 215:Core/Src/main.c **** 	        int idx = codeIndexChar - '1';
 216:Core/Src/main.c **** 	        // pointer to the code value after the SET_CODE_n prefix
 217:Core/Src/main.c **** 	        char *codeValue = &rxBuffer[11];
 218:Core/Src/main.c **** 	        // save the new code up to MAX_Len characters
 219:Core/Src/main.c **** 	        if (strlen(codeValue) <= MAX_LEN) {
 220:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 221:Core/Src/main.c **** 	        } else {
 222:Core/Src/main.c **** 	          strncpy(accessCodes[idx], codeValue, MAX_LEN);
 223:Core/Src/main.c **** 	          // ensure termination if truncated
 224:Core/Src/main.c **** 	          accessCodes[idx][MAX_LEN] = '\0';
 225:Core/Src/main.c **** 	        }
 226:Core/Src/main.c **** 	        // respond to confirm the code is saved
 227:Core/Src/main.c **** 	        const char *resp = "SAVED\r\n";
 228:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 229:Core/Src/main.c **** 
 230:Core/Src/main.c **** 	      } else {
 231:Core/Src/main.c **** 	        // error in SET_CODE command such as missing index or colon
 232:Core/Src/main.c **** 	        const char *resp = "ERROR\r\n";
 233:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 234:Core/Src/main.c **** 
 235:Core/Src/main.c **** 	      }
 236:Core/Src/main.c **** 	    }
 237:Core/Src/main.c **** 	    else {
 238:Core/Src/main.c **** 	      // unknown command received respond with generic error
 239:Core/Src/main.c **** 	      const char *resp = "ERROR\r\n";
 240:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 241:Core/Src/main.c **** 
 242:Core/Src/main.c **** 	    }
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** 	    // loop back to wait for the next command line
 245:Core/Src/main.c **** 	  }
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END 3 */
 248:Core/Src/main.c **** }
 249:Core/Src/main.c **** 
 250:Core/Src/main.c **** /**
 251:Core/Src/main.c ****   * @brief System Clock Configuration
 252:Core/Src/main.c ****   * @retval None
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c **** void SystemClock_Config(void)
 255:Core/Src/main.c **** {
 256:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 257:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 6


 260:Core/Src/main.c ****   */
 261:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 262:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 265:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 266:Core/Src/main.c ****   */
 267:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 268:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 269:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 270:Core/Src/main.c ****   //RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 272:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 273:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 274:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 275:Core/Src/main.c ****   // 16 MHz * 336 / 4 = 84 MHz
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 278:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 279:Core/Src/main.c ****   {
 280:Core/Src/main.c ****     Error_Handler();
 281:Core/Src/main.c ****   }
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 284:Core/Src/main.c ****   */
 285:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 286:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 287:Core/Src/main.c ****   //system clock= PLL 84MHz
 288:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 289:Core/Src/main.c ****   //HCLK=84 MHz
 290:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 291:Core/Src/main.c ****   //APB1=42 MHz
 292:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 293:Core/Src/main.c ****   //APB2=84 MHz
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 297:Core/Src/main.c ****   {
 298:Core/Src/main.c ****     Error_Handler();
 299:Core/Src/main.c ****   }
 300:Core/Src/main.c **** }
 301:Core/Src/main.c **** 
 302:Core/Src/main.c **** /**
 303:Core/Src/main.c ****   * @brief USART1 Initialization Function
 304:Core/Src/main.c ****   * @param None
 305:Core/Src/main.c ****   * @retval None
 306:Core/Src/main.c ****   */
 307:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 308:Core/Src/main.c **** {
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 311:Core/Src/main.c **** 	/* Enable UART and GPIO clocks */
 312:Core/Src/main.c **** 	 __HAL_RCC_USART1_CLK_ENABLE();
 313:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 314:Core/Src/main.c **** 
 315:Core/Src/main.c **** 	  /* Configure PA9  and PA10 as alternate function UART pins */
 316:Core/Src/main.c **** 	  GPIO_InitTypeDef GPIO_InitStruct = {0};
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 7


 317:Core/Src/main.c **** 	  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 318:Core/Src/main.c **** 	  // push-pull alternate function
 319:Core/Src/main.c **** 	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 320:Core/Src/main.c **** 	  // no pull-up or pull-down resistors
 321:Core/Src/main.c **** 	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 322:Core/Src/main.c **** 	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 323:Core/Src/main.c **** 	  // AF7 for USART1 pins
 324:Core/Src/main.c **** 	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 325:Core/Src/main.c **** 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 332:Core/Src/main.c ****   huart1.Instance = USART1;
 333:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 334:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 335:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 336:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 337:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 338:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 339:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 340:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 341:Core/Src/main.c ****   {
 342:Core/Src/main.c ****     Error_Handler();
 343:Core/Src/main.c ****   }
 344:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 347:Core/Src/main.c **** 
 348:Core/Src/main.c **** }
 349:Core/Src/main.c **** 
 350:Core/Src/main.c **** /**
 351:Core/Src/main.c ****   * @brief GPIO Initialization Function
 352:Core/Src/main.c ****   * @param None
 353:Core/Src/main.c ****   * @retval None
 354:Core/Src/main.c ****   */
 355:Core/Src/main.c **** static void MX_GPIO_Init(void)
 356:Core/Src/main.c **** {
  28              		.loc 1 356 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 357:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 357 3 view .LVU1
  42              		.loc 1 357 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 8


  44 0006 0394     		str	r4, [sp, #12]
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
 358:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 363:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  49              		.loc 1 363 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 363 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 363 3 view .LVU5
  54 0012 134B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00202 		orr	r2, r2, #2
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 363 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00202 		and	r2, r2, #2
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 363 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 363 3 view .LVU8
 364:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  66              		.loc 1 364 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 364 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 364 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F00102 		orr	r2, r2, #1
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 364 3 view .LVU12
  75 0030 1B6B     		ldr	r3, [r3, #48]
  76 0032 03F00103 		and	r3, r3, #1
  77 0036 0293     		str	r3, [sp, #8]
  78              		.loc 1 364 3 view .LVU13
  79 0038 029B     		ldr	r3, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 364 3 view .LVU14
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 367:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
  82              		.loc 1 367 3 view .LVU15
  83 003a 0A4D     		ldr	r5, .L3+4
  84 003c 2246     		mov	r2, r4
  85 003e FF21     		movs	r1, #255
  86 0040 2846     		mov	r0, r5
  87 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  88              	.LVL0:
 368:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 369:Core/Src/main.c **** 
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 9


 370:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 371:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 372:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
  89              		.loc 1 372 3 view .LVU16
  90              		.loc 1 372 23 is_stmt 0 view .LVU17
  91 0046 FF23     		movs	r3, #255
  92 0048 0393     		str	r3, [sp, #12]
 373:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 374:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  93              		.loc 1 374 3 is_stmt 1 view .LVU18
  94              		.loc 1 374 24 is_stmt 0 view .LVU19
  95 004a 0123     		movs	r3, #1
  96 004c 0493     		str	r3, [sp, #16]
 375:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  97              		.loc 1 375 3 is_stmt 1 view .LVU20
  98              		.loc 1 375 24 is_stmt 0 view .LVU21
  99 004e 0594     		str	r4, [sp, #20]
 376:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 100              		.loc 1 376 3 is_stmt 1 view .LVU22
 101              		.loc 1 376 25 is_stmt 0 view .LVU23
 102 0050 0694     		str	r4, [sp, #24]
 377:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 103              		.loc 1 377 3 is_stmt 1 view .LVU24
 104 0052 03A9     		add	r1, sp, #12
 105 0054 2846     		mov	r0, r5
 106 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 107              	.LVL1:
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 382:Core/Src/main.c **** }
 108              		.loc 1 382 1 is_stmt 0 view .LVU25
 109 005a 09B0     		add	sp, sp, #36
 110              	.LCFI2:
 111              		.cfi_def_cfa_offset 12
 112              		@ sp needed
 113 005c 30BD     		pop	{r4, r5, pc}
 114              	.L4:
 115 005e 00BF     		.align	2
 116              	.L3:
 117 0060 00380240 		.word	1073887232
 118 0064 00040240 		.word	1073873920
 119              		.cfi_endproc
 120              	.LFE140:
 122              		.section	.text.Error_Handler,"ax",%progbits
 123              		.align	1
 124              		.global	Error_Handler
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	Error_Handler:
 130              	.LFB141:
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** /* USER CODE END 4 */
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 10


 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** /**
 389:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 390:Core/Src/main.c ****   * @retval None
 391:Core/Src/main.c ****   */
 392:Core/Src/main.c **** void Error_Handler(void)
 393:Core/Src/main.c **** {
 131              		.loc 1 393 1 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ Volatile: function does not return.
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 394:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 395:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 396:Core/Src/main.c ****   __disable_irq();
 137              		.loc 1 396 3 view .LVU27
 138              	.LBB6:
 139              	.LBI6:
 140              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 11


  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 12


  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 13


 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 14


 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 15


 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 16


 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 17


 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 18


 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 19


 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 20


 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 21


 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 22


 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 23


 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 24


 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 25


 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 26


 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 27


 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141              		.loc 2 960 27 view .LVU28
 142              	.LBB7:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143              		.loc 2 962 3 view .LVU29
 144              		.syntax unified
 145              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 146 0000 72B6     		cpsid i
 147              	@ 0 "" 2
 148              		.thumb
 149              		.syntax unified
 150              	.L6:
 151              	.LBE7:
 152              	.LBE6:
 397:Core/Src/main.c ****   while (1)
 153              		.loc 1 397 3 view .LVU30
 398:Core/Src/main.c ****   {
 399:Core/Src/main.c ****   }
 154              		.loc 1 399 3 view .LVU31
 397:Core/Src/main.c ****   while (1)
 155              		.loc 1 397 9 view .LVU32
 156 0002 FEE7     		b	.L6
 157              		.cfi_endproc
 158              	.LFE141:
 160              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 161              		.align	1
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 166              	MX_USART1_UART_Init:
 167              	.LFB139:
 308:Core/Src/main.c **** 
 168              		.loc 1 308 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 32
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172 0000 10B5     		push	{r4, lr}
 173              	.LCFI3:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 14, -4
 177 0002 88B0     		sub	sp, sp, #32
 178              	.LCFI4:
 179              		.cfi_def_cfa_offset 40
 312:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 180              		.loc 1 312 3 view .LVU34
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 28


 181              	.LBB8:
 312:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 182              		.loc 1 312 3 view .LVU35
 183 0004 0024     		movs	r4, #0
 184 0006 0194     		str	r4, [sp, #4]
 312:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 185              		.loc 1 312 3 view .LVU36
 186 0008 1D4B     		ldr	r3, .L11
 187 000a 5A6C     		ldr	r2, [r3, #68]
 188 000c 42F01002 		orr	r2, r2, #16
 189 0010 5A64     		str	r2, [r3, #68]
 312:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 190              		.loc 1 312 3 view .LVU37
 191 0012 5A6C     		ldr	r2, [r3, #68]
 192 0014 02F01002 		and	r2, r2, #16
 193 0018 0192     		str	r2, [sp, #4]
 312:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 194              		.loc 1 312 3 view .LVU38
 195 001a 019A     		ldr	r2, [sp, #4]
 196              	.LBE8:
 312:Core/Src/main.c **** 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 197              		.loc 1 312 3 view .LVU39
 313:Core/Src/main.c **** 
 198              		.loc 1 313 3 view .LVU40
 199              	.LBB9:
 313:Core/Src/main.c **** 
 200              		.loc 1 313 3 view .LVU41
 201 001c 0294     		str	r4, [sp, #8]
 313:Core/Src/main.c **** 
 202              		.loc 1 313 3 view .LVU42
 203 001e 1A6B     		ldr	r2, [r3, #48]
 204 0020 42F00102 		orr	r2, r2, #1
 205 0024 1A63     		str	r2, [r3, #48]
 313:Core/Src/main.c **** 
 206              		.loc 1 313 3 view .LVU43
 207 0026 1B6B     		ldr	r3, [r3, #48]
 208 0028 03F00103 		and	r3, r3, #1
 209 002c 0293     		str	r3, [sp, #8]
 313:Core/Src/main.c **** 
 210              		.loc 1 313 3 view .LVU44
 211 002e 029B     		ldr	r3, [sp, #8]
 212              	.LBE9:
 313:Core/Src/main.c **** 
 213              		.loc 1 313 3 view .LVU45
 316:Core/Src/main.c **** 	  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 214              		.loc 1 316 4 view .LVU46
 316:Core/Src/main.c **** 	  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 215              		.loc 1 316 21 is_stmt 0 view .LVU47
 216 0030 0394     		str	r4, [sp, #12]
 217 0032 0494     		str	r4, [sp, #16]
 218 0034 0594     		str	r4, [sp, #20]
 219 0036 0694     		str	r4, [sp, #24]
 220 0038 0794     		str	r4, [sp, #28]
 317:Core/Src/main.c **** 	  // push-pull alternate function
 221              		.loc 1 317 4 is_stmt 1 view .LVU48
 317:Core/Src/main.c **** 	  // push-pull alternate function
 222              		.loc 1 317 24 is_stmt 0 view .LVU49
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 29


 223 003a 4FF4C063 		mov	r3, #1536
 224 003e 0393     		str	r3, [sp, #12]
 319:Core/Src/main.c **** 	  // no pull-up or pull-down resistors
 225              		.loc 1 319 4 is_stmt 1 view .LVU50
 319:Core/Src/main.c **** 	  // no pull-up or pull-down resistors
 226              		.loc 1 319 25 is_stmt 0 view .LVU51
 227 0040 0223     		movs	r3, #2
 228 0042 0493     		str	r3, [sp, #16]
 321:Core/Src/main.c **** 	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 229              		.loc 1 321 4 is_stmt 1 view .LVU52
 321:Core/Src/main.c **** 	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 230              		.loc 1 321 25 is_stmt 0 view .LVU53
 231 0044 0123     		movs	r3, #1
 232 0046 0593     		str	r3, [sp, #20]
 322:Core/Src/main.c **** 	  // AF7 for USART1 pins
 233              		.loc 1 322 4 is_stmt 1 view .LVU54
 322:Core/Src/main.c **** 	  // AF7 for USART1 pins
 234              		.loc 1 322 26 is_stmt 0 view .LVU55
 235 0048 0323     		movs	r3, #3
 236 004a 0693     		str	r3, [sp, #24]
 324:Core/Src/main.c **** 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 237              		.loc 1 324 4 is_stmt 1 view .LVU56
 324:Core/Src/main.c **** 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 238              		.loc 1 324 30 is_stmt 0 view .LVU57
 239 004c 0723     		movs	r3, #7
 240 004e 0793     		str	r3, [sp, #28]
 325:Core/Src/main.c **** 
 241              		.loc 1 325 4 is_stmt 1 view .LVU58
 242 0050 03A9     		add	r1, sp, #12
 243 0052 0C48     		ldr	r0, .L11+4
 244 0054 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL2:
 332:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 246              		.loc 1 332 3 view .LVU59
 332:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 247              		.loc 1 332 19 is_stmt 0 view .LVU60
 248 0058 0B48     		ldr	r0, .L11+8
 249 005a 0C4B     		ldr	r3, .L11+12
 250 005c 0360     		str	r3, [r0]
 333:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 251              		.loc 1 333 3 is_stmt 1 view .LVU61
 333:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 252              		.loc 1 333 24 is_stmt 0 view .LVU62
 253 005e 4FF4E133 		mov	r3, #115200
 254 0062 4360     		str	r3, [r0, #4]
 334:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 255              		.loc 1 334 3 is_stmt 1 view .LVU63
 334:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 256              		.loc 1 334 26 is_stmt 0 view .LVU64
 257 0064 8460     		str	r4, [r0, #8]
 335:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 258              		.loc 1 335 3 is_stmt 1 view .LVU65
 335:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 259              		.loc 1 335 24 is_stmt 0 view .LVU66
 260 0066 C460     		str	r4, [r0, #12]
 336:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 261              		.loc 1 336 3 is_stmt 1 view .LVU67
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 30


 336:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 262              		.loc 1 336 22 is_stmt 0 view .LVU68
 263 0068 0461     		str	r4, [r0, #16]
 337:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 264              		.loc 1 337 3 is_stmt 1 view .LVU69
 337:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 265              		.loc 1 337 20 is_stmt 0 view .LVU70
 266 006a 0C23     		movs	r3, #12
 267 006c 4361     		str	r3, [r0, #20]
 338:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 268              		.loc 1 338 3 is_stmt 1 view .LVU71
 338:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 269              		.loc 1 338 25 is_stmt 0 view .LVU72
 270 006e 8461     		str	r4, [r0, #24]
 339:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 271              		.loc 1 339 3 is_stmt 1 view .LVU73
 339:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 272              		.loc 1 339 28 is_stmt 0 view .LVU74
 273 0070 C461     		str	r4, [r0, #28]
 340:Core/Src/main.c ****   {
 274              		.loc 1 340 3 is_stmt 1 view .LVU75
 340:Core/Src/main.c ****   {
 275              		.loc 1 340 7 is_stmt 0 view .LVU76
 276 0072 FFF7FEFF 		bl	HAL_UART_Init
 277              	.LVL3:
 340:Core/Src/main.c ****   {
 278              		.loc 1 340 6 discriminator 1 view .LVU77
 279 0076 08B9     		cbnz	r0, .L10
 348:Core/Src/main.c **** 
 280              		.loc 1 348 1 view .LVU78
 281 0078 08B0     		add	sp, sp, #32
 282              	.LCFI5:
 283              		.cfi_remember_state
 284              		.cfi_def_cfa_offset 8
 285              		@ sp needed
 286 007a 10BD     		pop	{r4, pc}
 287              	.L10:
 288              	.LCFI6:
 289              		.cfi_restore_state
 342:Core/Src/main.c ****   }
 290              		.loc 1 342 5 is_stmt 1 view .LVU79
 291 007c FFF7FEFF 		bl	Error_Handler
 292              	.LVL4:
 293              	.L12:
 294              		.align	2
 295              	.L11:
 296 0080 00380240 		.word	1073887232
 297 0084 00000240 		.word	1073872896
 298 0088 00000000 		.word	huart1
 299 008c 00100140 		.word	1073811456
 300              		.cfi_endproc
 301              	.LFE139:
 303              		.section	.text.SystemClock_Config,"ax",%progbits
 304              		.align	1
 305              		.global	SystemClock_Config
 306              		.syntax unified
 307              		.thumb
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 31


 308              		.thumb_func
 310              	SystemClock_Config:
 311              	.LFB138:
 255:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 312              		.loc 1 255 1 view -0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 80
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316 0000 00B5     		push	{lr}
 317              	.LCFI7:
 318              		.cfi_def_cfa_offset 4
 319              		.cfi_offset 14, -4
 320 0002 95B0     		sub	sp, sp, #84
 321              	.LCFI8:
 322              		.cfi_def_cfa_offset 88
 256:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 323              		.loc 1 256 3 view .LVU81
 256:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 324              		.loc 1 256 22 is_stmt 0 view .LVU82
 325 0004 3422     		movs	r2, #52
 326 0006 0021     		movs	r1, #0
 327 0008 07A8     		add	r0, sp, #28
 328 000a FFF7FEFF 		bl	memset
 329              	.LVL5:
 257:Core/Src/main.c **** 
 330              		.loc 1 257 3 is_stmt 1 view .LVU83
 257:Core/Src/main.c **** 
 331              		.loc 1 257 22 is_stmt 0 view .LVU84
 332 000e 0023     		movs	r3, #0
 333 0010 0293     		str	r3, [sp, #8]
 334 0012 0393     		str	r3, [sp, #12]
 335 0014 0493     		str	r3, [sp, #16]
 336 0016 0593     		str	r3, [sp, #20]
 337 0018 0693     		str	r3, [sp, #24]
 261:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 338              		.loc 1 261 3 is_stmt 1 view .LVU85
 339              	.LBB10:
 261:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 340              		.loc 1 261 3 view .LVU86
 341 001a 0093     		str	r3, [sp]
 261:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 342              		.loc 1 261 3 view .LVU87
 343 001c 1F4A     		ldr	r2, .L19
 344 001e 116C     		ldr	r1, [r2, #64]
 345 0020 41F08051 		orr	r1, r1, #268435456
 346 0024 1164     		str	r1, [r2, #64]
 261:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 347              		.loc 1 261 3 view .LVU88
 348 0026 126C     		ldr	r2, [r2, #64]
 349 0028 02F08052 		and	r2, r2, #268435456
 350 002c 0092     		str	r2, [sp]
 261:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 351              		.loc 1 261 3 view .LVU89
 352 002e 009A     		ldr	r2, [sp]
 353              	.LBE10:
 261:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 354              		.loc 1 261 3 view .LVU90
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 32


 262:Core/Src/main.c **** 
 355              		.loc 1 262 3 view .LVU91
 356              	.LBB11:
 262:Core/Src/main.c **** 
 357              		.loc 1 262 3 view .LVU92
 358 0030 0193     		str	r3, [sp, #4]
 262:Core/Src/main.c **** 
 359              		.loc 1 262 3 view .LVU93
 360 0032 1B49     		ldr	r1, .L19+4
 361 0034 0A68     		ldr	r2, [r1]
 362 0036 22F44042 		bic	r2, r2, #49152
 363 003a 42F40042 		orr	r2, r2, #32768
 364 003e 0A60     		str	r2, [r1]
 262:Core/Src/main.c **** 
 365              		.loc 1 262 3 view .LVU94
 366 0040 0A68     		ldr	r2, [r1]
 367 0042 02F44042 		and	r2, r2, #49152
 368 0046 0192     		str	r2, [sp, #4]
 262:Core/Src/main.c **** 
 369              		.loc 1 262 3 view .LVU95
 370 0048 019A     		ldr	r2, [sp, #4]
 371              	.LBE11:
 262:Core/Src/main.c **** 
 372              		.loc 1 262 3 view .LVU96
 267:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 373              		.loc 1 267 3 view .LVU97
 267:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 374              		.loc 1 267 36 is_stmt 0 view .LVU98
 375 004a 0221     		movs	r1, #2
 376 004c 0791     		str	r1, [sp, #28]
 268:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 377              		.loc 1 268 3 is_stmt 1 view .LVU99
 268:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 378              		.loc 1 268 30 is_stmt 0 view .LVU100
 379 004e 0122     		movs	r2, #1
 380 0050 0A92     		str	r2, [sp, #40]
 269:Core/Src/main.c ****   //RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 381              		.loc 1 269 3 is_stmt 1 view .LVU101
 269:Core/Src/main.c ****   //RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 382              		.loc 1 269 41 is_stmt 0 view .LVU102
 383 0052 1022     		movs	r2, #16
 384 0054 0B92     		str	r2, [sp, #44]
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 385              		.loc 1 271 3 is_stmt 1 view .LVU103
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 386              		.loc 1 271 34 is_stmt 0 view .LVU104
 387 0056 0D91     		str	r1, [sp, #52]
 272:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 388              		.loc 1 272 3 is_stmt 1 view .LVU105
 272:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 389              		.loc 1 272 35 is_stmt 0 view .LVU106
 390 0058 0E93     		str	r3, [sp, #56]
 273:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 391              		.loc 1 273 3 is_stmt 1 view .LVU107
 273:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 392              		.loc 1 273 30 is_stmt 0 view .LVU108
 393 005a 0F92     		str	r2, [sp, #60]
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 33


 274:Core/Src/main.c ****   // 16 MHz * 336 / 4 = 84 MHz
 394              		.loc 1 274 3 is_stmt 1 view .LVU109
 274:Core/Src/main.c ****   // 16 MHz * 336 / 4 = 84 MHz
 395              		.loc 1 274 30 is_stmt 0 view .LVU110
 396 005c 4FF4A873 		mov	r3, #336
 397 0060 1093     		str	r3, [sp, #64]
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 398              		.loc 1 276 3 is_stmt 1 view .LVU111
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 399              		.loc 1 276 30 is_stmt 0 view .LVU112
 400 0062 0423     		movs	r3, #4
 401 0064 1193     		str	r3, [sp, #68]
 277:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 402              		.loc 1 277 3 is_stmt 1 view .LVU113
 277:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 403              		.loc 1 277 30 is_stmt 0 view .LVU114
 404 0066 0723     		movs	r3, #7
 405 0068 1293     		str	r3, [sp, #72]
 278:Core/Src/main.c ****   {
 406              		.loc 1 278 3 is_stmt 1 view .LVU115
 278:Core/Src/main.c ****   {
 407              		.loc 1 278 7 is_stmt 0 view .LVU116
 408 006a 07A8     		add	r0, sp, #28
 409 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 410              	.LVL6:
 278:Core/Src/main.c ****   {
 411              		.loc 1 278 6 discriminator 1 view .LVU117
 412 0070 80B9     		cbnz	r0, .L17
 285:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 413              		.loc 1 285 3 is_stmt 1 view .LVU118
 285:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 414              		.loc 1 285 31 is_stmt 0 view .LVU119
 415 0072 0F23     		movs	r3, #15
 416 0074 0293     		str	r3, [sp, #8]
 288:Core/Src/main.c ****   //HCLK=84 MHz
 417              		.loc 1 288 3 is_stmt 1 view .LVU120
 288:Core/Src/main.c ****   //HCLK=84 MHz
 418              		.loc 1 288 34 is_stmt 0 view .LVU121
 419 0076 0221     		movs	r1, #2
 420 0078 0391     		str	r1, [sp, #12]
 290:Core/Src/main.c ****   //APB1=42 MHz
 421              		.loc 1 290 3 is_stmt 1 view .LVU122
 290:Core/Src/main.c ****   //APB1=42 MHz
 422              		.loc 1 290 35 is_stmt 0 view .LVU123
 423 007a 0023     		movs	r3, #0
 424 007c 0493     		str	r3, [sp, #16]
 292:Core/Src/main.c ****   //APB2=84 MHz
 425              		.loc 1 292 3 is_stmt 1 view .LVU124
 292:Core/Src/main.c ****   //APB2=84 MHz
 426              		.loc 1 292 36 is_stmt 0 view .LVU125
 427 007e 4FF48052 		mov	r2, #4096
 428 0082 0592     		str	r2, [sp, #20]
 294:Core/Src/main.c **** 
 429              		.loc 1 294 3 is_stmt 1 view .LVU126
 294:Core/Src/main.c **** 
 430              		.loc 1 294 36 is_stmt 0 view .LVU127
 431 0084 0693     		str	r3, [sp, #24]
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 34


 296:Core/Src/main.c ****   {
 432              		.loc 1 296 3 is_stmt 1 view .LVU128
 296:Core/Src/main.c ****   {
 433              		.loc 1 296 7 is_stmt 0 view .LVU129
 434 0086 02A8     		add	r0, sp, #8
 435 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 436              	.LVL7:
 296:Core/Src/main.c ****   {
 437              		.loc 1 296 6 discriminator 1 view .LVU130
 438 008c 20B9     		cbnz	r0, .L18
 300:Core/Src/main.c **** 
 439              		.loc 1 300 1 view .LVU131
 440 008e 15B0     		add	sp, sp, #84
 441              	.LCFI9:
 442              		.cfi_remember_state
 443              		.cfi_def_cfa_offset 4
 444              		@ sp needed
 445 0090 5DF804FB 		ldr	pc, [sp], #4
 446              	.L17:
 447              	.LCFI10:
 448              		.cfi_restore_state
 280:Core/Src/main.c ****   }
 449              		.loc 1 280 5 is_stmt 1 view .LVU132
 450 0094 FFF7FEFF 		bl	Error_Handler
 451              	.LVL8:
 452              	.L18:
 298:Core/Src/main.c ****   }
 453              		.loc 1 298 5 view .LVU133
 454 0098 FFF7FEFF 		bl	Error_Handler
 455              	.LVL9:
 456              	.L20:
 457              		.align	2
 458              	.L19:
 459 009c 00380240 		.word	1073887232
 460 00a0 00700040 		.word	1073770496
 461              		.cfi_endproc
 462              	.LFE138:
 464              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 465              		.align	2
 466              	.LC0:
 467 0000 434F4E4E 		.ascii	"CONNECT\000"
 467      45435400 
 468              		.align	2
 469              	.LC1:
 470 0008 4F4B0D0A 		.ascii	"OK\015\012\000"
 470      00
 471 000d 000000   		.align	2
 472              	.LC2:
 473 0010 4552524F 		.ascii	"ERROR\015\012\000"
 473      520D0A00 
 474              		.align	2
 475              	.LC3:
 476 0018 44495343 		.ascii	"DISCONNECT\000"
 476      4F4E4E45 
 476      435400
 477 0023 00       		.align	2
 478              	.LC4:
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 35


 479 0024 4745545F 		.ascii	"GET_CODE_\000"
 479      434F4445 
 479      5F00
 480 002e 0000     		.align	2
 481              	.LC5:
 482 0030 434F4445 		.ascii	"CODE:%s\015\012\000"
 482      3A25730D 
 482      0A00
 483 003a 0000     		.align	2
 484              	.LC6:
 485 003c 4E4F545F 		.ascii	"NOT_FOUND\015\012\000"
 485      464F554E 
 485      440D0A00 
 486              		.align	2
 487              	.LC7:
 488 0048 5345545F 		.ascii	"SET_CODE_\000"
 488      434F4445 
 488      5F00
 489 0052 0000     		.align	2
 490              	.LC8:
 491 0054 53415645 		.ascii	"SAVED\015\012\000"
 491      440D0A00 
 492              		.section	.text.main,"ax",%progbits
 493              		.align	1
 494              		.global	main
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 499              	main:
 500              	.LFB137:
  82:Core/Src/main.c **** 
 501              		.loc 1 82 1 view -0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 568
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505 0000 30B5     		push	{r4, r5, lr}
 506              	.LCFI11:
 507              		.cfi_def_cfa_offset 12
 508              		.cfi_offset 4, -12
 509              		.cfi_offset 5, -8
 510              		.cfi_offset 14, -4
 511 0002 ADF50F7D 		sub	sp, sp, #572
 512              	.LCFI12:
 513              		.cfi_def_cfa_offset 584
  91:Core/Src/main.c **** 
 514              		.loc 1 91 3 view .LVU135
 515 0006 FFF7FEFF 		bl	HAL_Init
 516              	.LVL10:
  98:Core/Src/main.c **** 
 517              		.loc 1 98 3 view .LVU136
 518 000a FFF7FEFF 		bl	SystemClock_Config
 519              	.LVL11:
 105:Core/Src/main.c ****   MX_USART1_UART_Init();
 520              		.loc 1 105 3 view .LVU137
 521 000e FFF7FEFF 		bl	MX_GPIO_Init
 522              	.LVL12:
 106:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 36


 523              		.loc 1 106 3 view .LVU138
 524 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 525              	.LVL13:
 111:Core/Src/main.c ****   memset(accessCodes, 0, sizeof(accessCodes));  // initialize all codes as empty
 526              		.loc 1 111 3 view .LVU139
 112:Core/Src/main.c **** 
 527              		.loc 1 112 3 view .LVU140
 528 0016 40F22F12 		movw	r2, #303
 529 001a 0021     		movs	r1, #0
 530 001c 42A8     		add	r0, sp, #264
 531 001e FFF7FEFF 		bl	memset
 532              	.LVL14:
 115:Core/Src/main.c **** 
 533              		.loc 1 115 3 view .LVU141
 115:Core/Src/main.c **** 
 534              		.loc 1 115 8 is_stmt 0 view .LVU142
 535 0022 0025     		movs	r5, #0
 536              	.LVL15:
 537              	.L38:
 118:Core/Src/main.c **** 
 538              		.loc 1 118 3 is_stmt 1 view .LVU143
 124:Core/Src/main.c ****   {
 539              		.loc 1 124 3 view .LVU144
 540              	.LBB12:
 130:Core/Src/main.c **** 	    uint16_t i = 0;
 541              		.loc 1 130 6 view .LVU145
 131:Core/Src/main.c **** 	    // Read characters one by one until newline ('\n') is received
 542              		.loc 1 131 6 view .LVU146
 131:Core/Src/main.c **** 	    // Read characters one by one until newline ('\n') is received
 543              		.loc 1 131 15 is_stmt 0 view .LVU147
 544 0024 0024     		movs	r4, #0
 545              	.LVL16:
 546              	.L22:
 133:Core/Src/main.c **** 	      if (HAL_UART_Receive(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY) != HAL_OK) {
 547              		.loc 1 133 6 is_stmt 1 view .LVU148
 134:Core/Src/main.c **** 	        Error_Handler();  // In case of UART error, halt (could also continue to next loop)
 548              		.loc 1 134 8 view .LVU149
 134:Core/Src/main.c **** 	        Error_Handler();  // In case of UART error, halt (could also continue to next loop)
 549              		.loc 1 134 12 is_stmt 0 view .LVU150
 550 0026 4FF0FF33 		mov	r3, #-1
 551 002a 0122     		movs	r2, #1
 552 002c 0DF10701 		add	r1, sp, #7
 553 0030 6148     		ldr	r0, .L45
 554 0032 FFF7FEFF 		bl	HAL_UART_Receive
 555              	.LVL17:
 134:Core/Src/main.c **** 	        Error_Handler();  // In case of UART error, halt (could also continue to next loop)
 556              		.loc 1 134 11 discriminator 1 view .LVU151
 557 0036 60B9     		cbnz	r0, .L40
 137:Core/Src/main.c **** 	    	  // skip carriage return if present
 558              		.loc 1 137 8 is_stmt 1 view .LVU152
 137:Core/Src/main.c **** 	    	  // skip carriage return if present
 559              		.loc 1 137 14 is_stmt 0 view .LVU153
 560 0038 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 137:Core/Src/main.c **** 	    	  // skip carriage return if present
 561              		.loc 1 137 11 view .LVU154
 562 003c 0D2B     		cmp	r3, #13
 563 003e F2D0     		beq	.L22
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 37


 141:Core/Src/main.c **** 	    	  // newline indicates end of command
 564              		.loc 1 141 8 is_stmt 1 view .LVU155
 141:Core/Src/main.c **** 	    	  // newline indicates end of command
 565              		.loc 1 141 22 is_stmt 0 discriminator 1 view .LVU156
 566 0040 0A2B     		cmp	r3, #10
 567 0042 0BD0     		beq	.L25
 145:Core/Src/main.c **** 	    	  // append character to buffer if space allows
 568              		.loc 1 145 8 is_stmt 1 view .LVU157
 145:Core/Src/main.c **** 	    	  // append character to buffer if space allows
 569              		.loc 1 145 11 is_stmt 0 view .LVU158
 570 0044 7E2C     		cmp	r4, #126
 571 0046 06D8     		bhi	.L26
 147:Core/Src/main.c **** 	      } else {
 572              		.loc 1 147 10 is_stmt 1 view .LVU159
 147:Core/Src/main.c **** 	      } else {
 573              		.loc 1 147 20 is_stmt 0 view .LVU160
 574 0048 621C     		adds	r2, r4, #1
 575              	.LVL18:
 147:Core/Src/main.c **** 	      } else {
 576              		.loc 1 147 24 view .LVU161
 577 004a 22A9     		add	r1, sp, #136
 578 004c 0B55     		strb	r3, [r1, r4]
 147:Core/Src/main.c **** 	      } else {
 579              		.loc 1 147 20 view .LVU162
 580 004e 94B2     		uxth	r4, r2
 581 0050 E9E7     		b	.L22
 582              	.LVL19:
 583              	.L40:
 135:Core/Src/main.c **** 	      }
 584              		.loc 1 135 10 is_stmt 1 view .LVU163
 585 0052 FFF7FEFF 		bl	Error_Handler
 586              	.LVL20:
 587              	.L26:
 150:Core/Src/main.c **** 	        break;
 588              		.loc 1 150 9 view .LVU164
 150:Core/Src/main.c **** 	        break;
 589              		.loc 1 150 21 is_stmt 0 view .LVU165
 590 0056 22AB     		add	r3, sp, #136
 591 0058 0022     		movs	r2, #0
 592 005a 1A55     		strb	r2, [r3, r4]
 151:Core/Src/main.c **** 	      }
 593              		.loc 1 151 10 is_stmt 1 view .LVU166
 594              	.L25:
 155:Core/Src/main.c **** 
 595              		.loc 1 155 6 view .LVU167
 155:Core/Src/main.c **** 
 596              		.loc 1 155 18 is_stmt 0 view .LVU168
 597 005c 22A8     		add	r0, sp, #136
 598 005e 0023     		movs	r3, #0
 599 0060 0355     		strb	r3, [r0, r4]
 158:Core/Src/main.c **** 	      // CONNECT command: establish connection
 600              		.loc 1 158 6 is_stmt 1 view .LVU169
 158:Core/Src/main.c **** 	      // CONNECT command: establish connection
 601              		.loc 1 158 10 is_stmt 0 view .LVU170
 602 0062 5649     		ldr	r1, .L45+4
 603 0064 FFF7FEFF 		bl	strcmp
 604              	.LVL21:
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 38


 158:Core/Src/main.c **** 	      // CONNECT command: establish connection
 605              		.loc 1 158 9 discriminator 1 view .LVU171
 606 0068 0028     		cmp	r0, #0
 607 006a 33D0     		beq	.L41
 165:Core/Src/main.c **** 	      // if not connected yet, only CONNECT is valid and respond with error for any other command
 608              		.loc 1 165 11 is_stmt 1 view .LVU172
 165:Core/Src/main.c **** 	      // if not connected yet, only CONNECT is valid and respond with error for any other command
 609              		.loc 1 165 14 is_stmt 0 view .LVU173
 610 006c 002D     		cmp	r5, #0
 611 006e 3AD0     		beq	.L42
 171:Core/Src/main.c **** 	      // DISCONNECT command: end session
 612              		.loc 1 171 11 is_stmt 1 view .LVU174
 171:Core/Src/main.c **** 	      // DISCONNECT command: end session
 613              		.loc 1 171 15 is_stmt 0 view .LVU175
 614 0070 5349     		ldr	r1, .L45+8
 615 0072 22A8     		add	r0, sp, #136
 616 0074 FFF7FEFF 		bl	strcmp
 617              	.LVL22:
 171:Core/Src/main.c **** 	      // DISCONNECT command: end session
 618              		.loc 1 171 14 discriminator 1 view .LVU176
 619 0078 0028     		cmp	r0, #0
 620 007a 3CD0     		beq	.L43
 179:Core/Src/main.c **** 	      // GET_CODE_n command: retrieve a code if it exists
 621              		.loc 1 179 11 is_stmt 1 view .LVU177
 179:Core/Src/main.c **** 	      // GET_CODE_n command: retrieve a code if it exists
 622              		.loc 1 179 15 is_stmt 0 view .LVU178
 623 007c 0922     		movs	r2, #9
 624 007e 5149     		ldr	r1, .L45+12
 625 0080 22A8     		add	r0, sp, #136
 626 0082 FFF7FEFF 		bl	strncmp
 627              	.LVL23:
 179:Core/Src/main.c **** 	      // GET_CODE_n command: retrieve a code if it exists
 628              		.loc 1 179 14 discriminator 1 view .LVU179
 629 0086 0028     		cmp	r0, #0
 630 0088 4ED1     		bne	.L31
 631              	.LBB13:
 183:Core/Src/main.c **** 
 632              		.loc 1 183 8 is_stmt 1 view .LVU180
 183:Core/Src/main.c **** 
 633              		.loc 1 183 13 is_stmt 0 view .LVU181
 634 008a 9DF89120 		ldrb	r2, [sp, #145]	@ zero_extendqisi2
 635              	.LVL24:
 185:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 636              		.loc 1 185 8 is_stmt 1 view .LVU182
 185:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 637              		.loc 1 185 34 is_stmt 0 view .LVU183
 638 008e A2F13103 		sub	r3, r2, #49
 639 0092 DBB2     		uxtb	r3, r3
 185:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 640              		.loc 1 185 11 view .LVU184
 641 0094 022B     		cmp	r3, #2
 642 0096 3FD8     		bhi	.L32
 185:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 643              		.loc 1 185 70 discriminator 1 view .LVU185
 644 0098 9DF89230 		ldrb	r3, [sp, #146]	@ zero_extendqisi2
 185:Core/Src/main.c **** 	    	  // convert '1','2','3' to 0,1,2
 645              		.loc 1 185 59 discriminator 1 view .LVU186
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 39


 646 009c 002B     		cmp	r3, #0
 647 009e 3BD1     		bne	.L32
 648              	.LBB14:
 187:Core/Src/main.c **** 
 649              		.loc 1 187 10 is_stmt 1 view .LVU187
 187:Core/Src/main.c **** 
 650              		.loc 1 187 14 is_stmt 0 view .LVU188
 651 00a0 313A     		subs	r2, r2, #49
 652              	.LVL25:
 189:Core/Src/main.c **** 	          // if code exists send it back prefixed with "CODE:"
 653              		.loc 1 189 10 is_stmt 1 view .LVU189
 189:Core/Src/main.c **** 	          // if code exists send it back prefixed with "CODE:"
 654              		.loc 1 189 30 is_stmt 0 view .LVU190
 655 00a2 6523     		movs	r3, #101
 656 00a4 02FB03F3 		mul	r3, r2, r3
 657 00a8 42A9     		add	r1, sp, #264
 658 00aa CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 189:Core/Src/main.c **** 	          // if code exists send it back prefixed with "CODE:"
 659              		.loc 1 189 13 view .LVU191
 660 00ac 63B3     		cbz	r3, .L33
 661              	.LBB15:
 191:Core/Src/main.c **** 	          snprintf(txBuffer, sizeof(txBuffer), "CODE:%s\r\n", accessCodes[idx]);
 662              		.loc 1 191 12 is_stmt 1 view .LVU192
 192:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 663              		.loc 1 192 12 view .LVU193
 664 00ae 6523     		movs	r3, #101
 665 00b0 03FB0213 		mla	r3, r3, r2, r1
 666 00b4 444A     		ldr	r2, .L45+16
 667              	.LVL26:
 192:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 668              		.loc 1 192 12 is_stmt 0 view .LVU194
 669 00b6 8021     		movs	r1, #128
 670 00b8 02A8     		add	r0, sp, #8
 671 00ba FFF7FEFF 		bl	snprintf
 672              	.LVL27:
 193:Core/Src/main.c **** 
 673              		.loc 1 193 12 is_stmt 1 view .LVU195
 193:Core/Src/main.c **** 
 674              		.loc 1 193 59 is_stmt 0 view .LVU196
 675 00be 02A8     		add	r0, sp, #8
 676 00c0 FFF7FEFF 		bl	strlen
 677              	.LVL28:
 193:Core/Src/main.c **** 
 678              		.loc 1 193 12 discriminator 1 view .LVU197
 679 00c4 4FF0FF33 		mov	r3, #-1
 680 00c8 82B2     		uxth	r2, r0
 681 00ca 02A9     		add	r1, sp, #8
 682 00cc 3A48     		ldr	r0, .L45
 683 00ce FFF7FEFF 		bl	HAL_UART_Transmit
 684              	.LVL29:
 685              	.LBE15:
 686 00d2 A7E7     		b	.L38
 687              	.LVL30:
 688              	.L41:
 193:Core/Src/main.c **** 
 689              		.loc 1 193 12 discriminator 1 view .LVU198
 690              	.LBE14:
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 40


 691              	.LBE13:
 692              	.LBB19:
 160:Core/Src/main.c **** 	      const char *resp = "OK\r\n";
 693              		.loc 1 160 8 is_stmt 1 view .LVU199
 161:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 694              		.loc 1 161 8 view .LVU200
 162:Core/Src/main.c **** 
 695              		.loc 1 162 8 view .LVU201
 162:Core/Src/main.c **** 
 696              		.loc 1 162 8 is_stmt 0 discriminator 1 view .LVU202
 697 00d4 4FF0FF33 		mov	r3, #-1
 698 00d8 0422     		movs	r2, #4
 699 00da 3C49     		ldr	r1, .L45+20
 700 00dc 3648     		ldr	r0, .L45
 701 00de FFF7FEFF 		bl	HAL_UART_Transmit
 702              	.LVL31:
 160:Core/Src/main.c **** 	      const char *resp = "OK\r\n";
 703              		.loc 1 160 18 view .LVU203
 704 00e2 0125     		movs	r5, #1
 705              	.LBE19:
 706 00e4 9EE7     		b	.L38
 707              	.LVL32:
 708              	.L42:
 709              	.LBB20:
 167:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 710              		.loc 1 167 8 is_stmt 1 view .LVU204
 168:Core/Src/main.c **** 
 711              		.loc 1 168 8 view .LVU205
 168:Core/Src/main.c **** 
 712              		.loc 1 168 8 is_stmt 0 discriminator 1 view .LVU206
 713 00e6 4FF0FF33 		mov	r3, #-1
 714 00ea 0722     		movs	r2, #7
 715 00ec 3849     		ldr	r1, .L45+24
 716 00ee 3248     		ldr	r0, .L45
 717 00f0 FFF7FEFF 		bl	HAL_UART_Transmit
 718              	.LVL33:
 719              	.LBE20:
 720 00f4 96E7     		b	.L38
 721              	.LVL34:
 722              	.L43:
 723              	.LBB21:
 173:Core/Src/main.c **** 	      const char *resp = "OK\r\n";
 724              		.loc 1 173 8 is_stmt 1 view .LVU207
 174:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 725              		.loc 1 174 8 view .LVU208
 175:Core/Src/main.c **** 
 726              		.loc 1 175 8 view .LVU209
 175:Core/Src/main.c **** 
 727              		.loc 1 175 8 is_stmt 0 discriminator 1 view .LVU210
 728 00f6 4FF0FF33 		mov	r3, #-1
 729 00fa 0422     		movs	r2, #4
 730 00fc 3349     		ldr	r1, .L45+20
 731 00fe 2E48     		ldr	r0, .L45
 732 0100 FFF7FEFF 		bl	HAL_UART_Transmit
 733              	.LVL35:
 173:Core/Src/main.c **** 	      const char *resp = "OK\r\n";
 734              		.loc 1 173 18 view .LVU211
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 41


 735 0104 0025     		movs	r5, #0
 736              	.LBE21:
 737 0106 8DE7     		b	.L38
 738              	.LVL36:
 739              	.L33:
 740              	.LBB22:
 741              	.LBB17:
 742              	.LBB16:
 197:Core/Src/main.c **** 	          HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 743              		.loc 1 197 12 is_stmt 1 view .LVU212
 198:Core/Src/main.c **** 
 744              		.loc 1 198 12 view .LVU213
 198:Core/Src/main.c **** 
 745              		.loc 1 198 12 is_stmt 0 discriminator 1 view .LVU214
 746 0108 4FF0FF33 		mov	r3, #-1
 747 010c 0B22     		movs	r2, #11
 748              	.LVL37:
 198:Core/Src/main.c **** 
 749              		.loc 1 198 12 discriminator 1 view .LVU215
 750 010e 3149     		ldr	r1, .L45+28
 751 0110 2948     		ldr	r0, .L45
 752 0112 FFF7FEFF 		bl	HAL_UART_Transmit
 753              	.LVL38:
 198:Core/Src/main.c **** 
 754              		.loc 1 198 12 discriminator 1 view .LVU216
 755 0116 85E7     		b	.L38
 756              	.LVL39:
 757              	.L32:
 198:Core/Src/main.c **** 
 758              		.loc 1 198 12 discriminator 1 view .LVU217
 759              	.LBE16:
 760              	.LBE17:
 761              	.LBB18:
 203:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 762              		.loc 1 203 10 is_stmt 1 view .LVU218
 204:Core/Src/main.c **** 
 763              		.loc 1 204 10 view .LVU219
 204:Core/Src/main.c **** 
 764              		.loc 1 204 10 is_stmt 0 discriminator 1 view .LVU220
 765 0118 4FF0FF33 		mov	r3, #-1
 766 011c 0722     		movs	r2, #7
 767              	.LVL40:
 204:Core/Src/main.c **** 
 768              		.loc 1 204 10 discriminator 1 view .LVU221
 769 011e 2C49     		ldr	r1, .L45+24
 770 0120 2548     		ldr	r0, .L45
 771 0122 FFF7FEFF 		bl	HAL_UART_Transmit
 772              	.LVL41:
 204:Core/Src/main.c **** 
 773              		.loc 1 204 10 discriminator 1 view .LVU222
 774 0126 7DE7     		b	.L38
 775              	.LVL42:
 776              	.L31:
 204:Core/Src/main.c **** 
 777              		.loc 1 204 10 discriminator 1 view .LVU223
 778              	.LBE18:
 779              	.LBE22:
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 42


 208:Core/Src/main.c **** 	      // SET_CODE_n:value command: store a new code value
 780              		.loc 1 208 11 is_stmt 1 view .LVU224
 208:Core/Src/main.c **** 	      // SET_CODE_n:value command: store a new code value
 781              		.loc 1 208 15 is_stmt 0 view .LVU225
 782 0128 0922     		movs	r2, #9
 783 012a 2B49     		ldr	r1, .L45+32
 784 012c 22A8     		add	r0, sp, #136
 785 012e FFF7FEFF 		bl	strncmp
 786              	.LVL43:
 208:Core/Src/main.c **** 	      // SET_CODE_n:value command: store a new code value
 787              		.loc 1 208 14 discriminator 1 view .LVU226
 788 0132 C0BB     		cbnz	r0, .L34
 789              	.LBB23:
 211:Core/Src/main.c **** 
 790              		.loc 1 211 8 is_stmt 1 view .LVU227
 211:Core/Src/main.c **** 
 791              		.loc 1 211 13 is_stmt 0 view .LVU228
 792 0134 9DF89120 		ldrb	r2, [sp, #145]	@ zero_extendqisi2
 793              	.LVL44:
 213:Core/Src/main.c **** 	    	  // target index 0-2
 794              		.loc 1 213 8 is_stmt 1 view .LVU229
 213:Core/Src/main.c **** 	    	  // target index 0-2
 795              		.loc 1 213 34 is_stmt 0 view .LVU230
 796 0138 A2F13103 		sub	r3, r2, #49
 797 013c DBB2     		uxtb	r3, r3
 213:Core/Src/main.c **** 	    	  // target index 0-2
 798              		.loc 1 213 11 view .LVU231
 799 013e 022B     		cmp	r3, #2
 800 0140 03D8     		bhi	.L35
 213:Core/Src/main.c **** 	    	  // target index 0-2
 801              		.loc 1 213 70 discriminator 1 view .LVU232
 802 0142 9DF89230 		ldrb	r3, [sp, #146]	@ zero_extendqisi2
 213:Core/Src/main.c **** 	    	  // target index 0-2
 803              		.loc 1 213 59 discriminator 1 view .LVU233
 804 0146 3A2B     		cmp	r3, #58
 805 0148 07D0     		beq	.L44
 806              	.L35:
 807              	.LBB24:
 232:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 808              		.loc 1 232 10 is_stmt 1 view .LVU234
 809              	.LVL45:
 233:Core/Src/main.c **** 
 810              		.loc 1 233 10 view .LVU235
 233:Core/Src/main.c **** 
 811              		.loc 1 233 10 is_stmt 0 discriminator 1 view .LVU236
 812 014a 4FF0FF33 		mov	r3, #-1
 813 014e 0722     		movs	r2, #7
 814              	.LVL46:
 233:Core/Src/main.c **** 
 815              		.loc 1 233 10 discriminator 1 view .LVU237
 816 0150 1F49     		ldr	r1, .L45+24
 817 0152 1948     		ldr	r0, .L45
 818 0154 FFF7FEFF 		bl	HAL_UART_Transmit
 819              	.LVL47:
 233:Core/Src/main.c **** 
 820              		.loc 1 233 10 discriminator 1 view .LVU238
 821 0158 64E7     		b	.L38
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 43


 822              	.LVL48:
 823              	.L44:
 233:Core/Src/main.c **** 
 824              		.loc 1 233 10 discriminator 1 view .LVU239
 825              	.LBE24:
 826              	.LBB25:
 215:Core/Src/main.c **** 	        // pointer to the code value after the SET_CODE_n prefix
 827              		.loc 1 215 10 is_stmt 1 view .LVU240
 215:Core/Src/main.c **** 	        // pointer to the code value after the SET_CODE_n prefix
 828              		.loc 1 215 14 is_stmt 0 view .LVU241
 829 015a A2F13104 		sub	r4, r2, #49
 830              	.LVL49:
 217:Core/Src/main.c **** 	        // save the new code up to MAX_Len characters
 831              		.loc 1 217 10 is_stmt 1 view .LVU242
 219:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 832              		.loc 1 219 10 view .LVU243
 219:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 833              		.loc 1 219 14 is_stmt 0 view .LVU244
 834 015e 0DF19300 		add	r0, sp, #147
 835              	.LVL50:
 219:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 836              		.loc 1 219 14 view .LVU245
 837 0162 FFF7FEFF 		bl	strlen
 838              	.LVL51:
 219:Core/Src/main.c **** 	          strcpy(accessCodes[idx], codeValue);
 839              		.loc 1 219 13 discriminator 1 view .LVU246
 840 0166 6428     		cmp	r0, #100
 841 0168 0FD8     		bhi	.L36
 220:Core/Src/main.c **** 	        } else {
 842              		.loc 1 220 12 is_stmt 1 view .LVU247
 843 016a 0DF19301 		add	r1, sp, #147
 844              	.LVL52:
 220:Core/Src/main.c **** 	        } else {
 845              		.loc 1 220 12 is_stmt 0 view .LVU248
 846 016e 6520     		movs	r0, #101
 847 0170 42AB     		add	r3, sp, #264
 848 0172 00FB0430 		mla	r0, r0, r4, r3
 849 0176 FFF7FEFF 		bl	strcpy
 850              	.LVL53:
 851              	.L37:
 227:Core/Src/main.c **** 	        HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 852              		.loc 1 227 10 is_stmt 1 view .LVU249
 228:Core/Src/main.c **** 
 853              		.loc 1 228 10 view .LVU250
 228:Core/Src/main.c **** 
 854              		.loc 1 228 10 is_stmt 0 discriminator 1 view .LVU251
 855 017a 4FF0FF33 		mov	r3, #-1
 856 017e 0722     		movs	r2, #7
 857 0180 1649     		ldr	r1, .L45+36
 858 0182 0D48     		ldr	r0, .L45
 859 0184 FFF7FEFF 		bl	HAL_UART_Transmit
 860              	.LVL54:
 861              	.LBE25:
 213:Core/Src/main.c **** 	    	  // target index 0-2
 862              		.loc 1 213 83 view .LVU252
 863 0188 4CE7     		b	.L38
 864              	.LVL55:
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 44


 865              	.L36:
 866              	.LBB26:
 222:Core/Src/main.c **** 	          // ensure termination if truncated
 867              		.loc 1 222 12 is_stmt 1 view .LVU253
 222:Core/Src/main.c **** 	          // ensure termination if truncated
 868              		.loc 1 222 31 is_stmt 0 view .LVU254
 869 018a 6523     		movs	r3, #101
 870 018c 42AA     		add	r2, sp, #264
 871 018e 03FB0424 		mla	r4, r3, r4, r2
 872              	.LVL56:
 222:Core/Src/main.c **** 	          // ensure termination if truncated
 873              		.loc 1 222 12 view .LVU255
 874 0192 6422     		movs	r2, #100
 875 0194 0DF19301 		add	r1, sp, #147
 876              	.LVL57:
 222:Core/Src/main.c **** 	          // ensure termination if truncated
 877              		.loc 1 222 12 view .LVU256
 878 0198 2046     		mov	r0, r4
 879 019a FFF7FEFF 		bl	strncpy
 880              	.LVL58:
 224:Core/Src/main.c **** 	        }
 881              		.loc 1 224 12 is_stmt 1 view .LVU257
 224:Core/Src/main.c **** 	        }
 882              		.loc 1 224 38 is_stmt 0 view .LVU258
 883 019e 0023     		movs	r3, #0
 884 01a0 84F86430 		strb	r3, [r4, #100]
 885 01a4 E9E7     		b	.L37
 886              	.LVL59:
 887              	.L34:
 224:Core/Src/main.c **** 	        }
 888              		.loc 1 224 38 view .LVU259
 889              	.LBE26:
 890              	.LBE23:
 891              	.LBB27:
 239:Core/Src/main.c **** 	      HAL_UART_Transmit(&huart1, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 892              		.loc 1 239 8 is_stmt 1 view .LVU260
 240:Core/Src/main.c **** 
 893              		.loc 1 240 8 view .LVU261
 240:Core/Src/main.c **** 
 894              		.loc 1 240 8 is_stmt 0 discriminator 1 view .LVU262
 895 01a6 4FF0FF33 		mov	r3, #-1
 896 01aa 0722     		movs	r2, #7
 897 01ac 0849     		ldr	r1, .L45+24
 898 01ae 0248     		ldr	r0, .L45
 899 01b0 FFF7FEFF 		bl	HAL_UART_Transmit
 900              	.LVL60:
 240:Core/Src/main.c **** 
 901              		.loc 1 240 8 discriminator 1 view .LVU263
 902              	.LBE27:
 903              	.LBE12:
 124:Core/Src/main.c ****   {
 904              		.loc 1 124 9 is_stmt 1 view .LVU264
 125:Core/Src/main.c ****     /* USER CODE END WHILE */
 905              		.loc 1 125 3 is_stmt 0 view .LVU265
 906 01b4 36E7     		b	.L38
 907              	.L46:
 908 01b6 00BF     		.align	2
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 45


 909              	.L45:
 910 01b8 00000000 		.word	huart1
 911 01bc 00000000 		.word	.LC0
 912 01c0 18000000 		.word	.LC3
 913 01c4 24000000 		.word	.LC4
 914 01c8 30000000 		.word	.LC5
 915 01cc 08000000 		.word	.LC1
 916 01d0 10000000 		.word	.LC2
 917 01d4 3C000000 		.word	.LC6
 918 01d8 48000000 		.word	.LC7
 919 01dc 54000000 		.word	.LC8
 920              		.cfi_endproc
 921              	.LFE137:
 923              		.global	huart1
 924              		.section	.bss.huart1,"aw",%nobits
 925              		.align	2
 928              	huart1:
 929 0000 00000000 		.space	72
 929      00000000 
 929      00000000 
 929      00000000 
 929      00000000 
 930              		.text
 931              	.Letext0:
 932              		.file 3 "\\\\?\\C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32
 933              		.file 4 "C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32CubeIDE
 934              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 935              		.file 6 "\\\\?\\C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32
 936              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 937              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 938              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 939              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 940              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 941              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 942              		.file 13 "C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32CubeID
 943              		.file 14 "C:\\Users\\PFFTAH001\\OneDrive - University of Cape Town\\Desktop\\EEE3095S\\STM32CubeID
 944              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 945              		.file 16 "<built-in>"
ARM GAS  C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:117    .text.MX_GPIO_Init:00000060 $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:123    .text.Error_Handler:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:129    .text.Error_Handler:00000000 Error_Handler
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:161    .text.MX_USART1_UART_Init:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:166    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:296    .text.MX_USART1_UART_Init:00000080 $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:928    .bss.huart1:00000000 huart1
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:304    .text.SystemClock_Config:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:310    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:459    .text.SystemClock_Config:0000009c $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:465    .rodata.main.str1.4:00000000 $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:493    .text.main:00000000 $t
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:499    .text.main:00000000 main
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:910    .text.main:000001b8 $d
C:\Users\PFFTAH~1\AppData\Local\Temp\ccxKxsSM.s:925    .bss.huart1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_UART_Receive
strcmp
strncmp
snprintf
strlen
HAL_UART_Transmit
strcpy
strncpy
